@page "/GalleryDetail/{artworkId:int}"
@using System.Text.Json
@using JoArtClassLib.Art
@using JoArtClassLib.Error
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http
@inject IJSRuntime JS

<br/>


@if (artwork == null)
{
    <p class="text-center">Kunstverk laster ..</p>
}
else
{
    <div class="container-fluid px-5">
        <div class="row justify-content-center">
            <div class="col-xl-10 d-flex flex-row flex-wrap gap-5">

                
                <div id="artworkCarousel" class="carousel slide flex-grow-1" style="min-width: 60%;">
                    <div class="carousel-inner">
                        @foreach (var img in artwork.Images)
                        {
                            <div class="carousel-item @((artwork.Images.IndexOf(img) == 0) ? "active" : "")">
                                <img src="@img.ImageUrl"
                                     class="d-block w-100"
                                     style="max-height: 90vh; object-fit: contain; border-radius: 12px; cursor: zoom-in;"
                                     alt="@artwork.Title"
                                     @onclick="() => ShowDetailedImage(img.ImageUrl)"/>
                            </div>
                        }
                    </div>
                    <button class="carousel-control-prev" type="button" data-bs-target="#artworkCarousel" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#artworkCarousel" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                </div>


                <div class="d-flex flex-column justify-content-start" style="min-width: 30%; font-size: 1.1rem;">
                    <h4 class="my-4">@artwork?.Title</h4>
                    <p class="mb-4">
                        <strong>Beskrivelse:</strong> @artwork.Description
                    </p>
                    <p class="mb-4"><strong>Dimensjoner:</strong> @artwork.WidthDimension x @artwork.HeightDimension cm</p>
                    @if (artwork.ForSale)
                    {
                        <p class="mb-4"><strong>Pris:</strong> @(artwork.Price?.ToString("F2") ?? "0.00") ,-</p>
                        <div class="navbarFont">
                            <ul>
                                <div>
                                    <li class="nav-item d-flex align-items-center me-3">
                                        <NavLink class="btn btn-success fw-bold rounded px-4 py-3"
                                                 href=@($"/checkout?productId={artworkId}")>
                                            Kjøp for Kr <strong>@(artwork.Price?.ToString("F2") ?? "0.00") <i class="bi bi-arrow-right">➜</i>➜ </strong>
                                        </NavLink>
                                    </li>
                                </div>
                                <div>
                                    <li class="nav-item d-flex align-items-center me-3">

                                    </li>
                                </div>
                            </ul>

                        </div>

                    }

                </div>

            </div>
        </div>
    </div>
    
    <!-- Display errors-->
    @if (errors.Count > 0)
    {
        <h2>Feilmeldinger</h2>
        <ul class="text-danger">
            @foreach (var error in errors)
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
    }
    
    <br/><br/>
    
    <!-- Modal Image-->
    <div class="modal fade" id="imageModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-fullscreen">
            <div class="modal-content bg-dark bg-opacity-75 border-0 position-relative overflow-hidden">

            
                <button type="button"
                        class="btn-close position-absolute top-0 end-0 m-3 z-3"
                        data-bs-dismiss="modal"
                        aria-label="Close"
                        style="filter: invert(1); opacity: 0.85;">
                </button>

            
                <div class="modal-body d-flex justify-content-center align-items-center p-0 z-1">
                    <img id="modalImage"
                         src=""
                         class="img-fluid rounded shadow"
                         style="max-height: 95vh; pointer-events: none; image-rendering: smooth;" />

                </div>
            </div>
        </div>
    </div>
    
    
    <!-- Extra ADMIN option bar for artwork -->
    <AuthorizeView>
        <div class="navbarFont">
            <nav class="navbar navbar-expand-lg navbar-light bg-light border-bottom py-4">
                <div class="container">
                    <ul class="navbar-nav mx-auto">
                        <li class="nav-item d-flex align-items-center me-3">
                            <div class="d-flex flex-column">
                                <button type="button" data-bs-toggle="modal" data-bs-target="#deleteWarningModal"
                                        class="btn btn-sm btn-outline-danger">
                                    Slett Kunstverk
                                </button>
                            </div>
                        </li>
                        <li class="nav-item d-flex align-items-center">
                            <NavLink class="btn btn-sm btn-outline-warning fw-bold rounded px-2 py-1" 
                                     href=@($"/update-artwork/{artworkId}")>
                                Endre Kunstverk
                            </NavLink>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
        <!-- Modal Delete Artwork -->
        <div class="modal fade" id="deleteWarningModal" tabindex="-1"
             aria-labelledby="modalDeleteWarning" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">

                    <!-- Header -->
                    <div class="modal-header">
                        <h5 class="modal-title" id="modalDeleteWarning">Bekreft sletting av kunstverk</h5>
                        <button type="button" class="btn-close"
                                data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>

                    <!-- Body -->
                    <div class="modal-body">
                        Er du sikker på at du ønsker å slette kunstverket?
                    </div>

                    <!-- Footer -->
                    <div class="modal-footer">
                        <button class="btn btn-secondary"
                                data-bs-dismiss="modal"
                                @onclick="CloseConfirmation">Avbryt</button>
                        <button class="btn btn-danger"
                                data-bs-dismiss="modal"
                                @onclick="ConfirmDelete">Slett Kunstverk</button>
                    </div>

                </div>
            </div>
        </div>
    </AuthorizeView>
}




@code {
    [Parameter] public int artworkId { get; set; }

    private ArtworkResponse? artwork;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            artwork = await Http.GetFromJsonAsync<ArtworkResponse>($"api/PublicGallery/artworks/{artworkId}");
        }
        catch (Exception e)
        {
            Console.WriteLine("Error fetching artwork data: " + e.Message);
            throw;
        }
    }

    private async Task ShowDetailedImage(string imageUrl)
    {
        await JS.InvokeVoidAsync("showImageModal", imageUrl);
    }
    
// Delete button trigger scenario
    private bool ShowConfirmation = false;
    // Error collections
    private List<ErrorResponse> errors = new();
    private string? ErrorMessage;
    
    // Delete warning 
    private void OpenConfirmation()
    {
        ShowConfirmation = true;
    }
    
    // Delete canceled -> abort deletion
    private void CloseConfirmation()
    {
        ShowConfirmation = false;
    }
    
    // Delete confirmed -> deleting artwork
    private async Task ConfirmDelete()
    {
        errors.Clear();  // Clear old errors before this attempt

        try
        {
            // 1) Retrieve JWT from AuthStateProvider
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var token = authState.User.FindFirst("JWT")?.Value;

            if (string.IsNullOrWhiteSpace(token))
            {
                ErrorMessage = "Bruker er ikke logget inn.";
                StateHasChanged();
                return;
            }

            // 2) Attach the token as a Bearer header
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // 3) Call the DELETE endpoint
            var response = await Http.DeleteAsync($"http://localhost:8080/admin/api/Gallery/delete-artwork/{artworkId}");

            Console.WriteLine($"Response status code: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                // 4a) On success, parse JSON into ArtworkResponse
                var deletedArtwork = await response.Content.ReadFromJsonAsync<ArtworkResponse>();
                var artworkTitle = deletedArtwork?.Title;

                // Navigate back to gallery with a query param indicating which item was deleted
                navigationManager.NavigateTo($"/gallery?deleted={artworkTitle}");
            }
            else
            {
                // 4b) On failure, check if the response is JSON
                var contentType = response.Content.Headers.ContentType?.MediaType;
                var contentString = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Response body on failure: {contentString}");

                if (!string.IsNullOrWhiteSpace(contentString) &&
                    contentType == "application/json")
                {
                    // Attempt to parse as our ErrorResponse
                    var errorObj = JsonSerializer.Deserialize<ErrorResponse>(contentString);
                    if (!string.IsNullOrWhiteSpace(errorObj?.ErrorMessage))
                    {
                        errors.Add(errorObj);
                    }
                    else
                    {
                        errors.Add(new ErrorResponse
                        {
                            ErrorMessage = $"Kunne ikke slette kunstverk (HTTP {(int)response.StatusCode})."
                        });
                    }
                }
                else
                {
                    // The server didn't return JSON, fallback to a generic error
                    errors.Add(new ErrorResponse
                    {
                        ErrorMessage = $"Kunne ikke slette kunstverk (HTTP {(int)response.StatusCode})."
                    });
                }
            }
        }
        catch (Exception ex)
        {
            // 5) Log and show unexpected error
            errors.Add(new ErrorResponse
            {
                ErrorMessage = "En uventet feil oppstod, og kunstverket ble ikke slettet."
            });

            Console.WriteLine($"\"En uventet feil oppstod: {ex}"); 
        }
        finally
        {
            // Hide any local "ShowConfirmation" modal
            ShowConfirmation = false;
        }
    }
}