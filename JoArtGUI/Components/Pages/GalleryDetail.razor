@page "/GalleryDetail/{artworkId:int}"
@using System.Text.Json
@using JoArtClassLib.Art
@using JoArtClassLib.Art.Artwork
@using JoArtClassLib.Error
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http
@inject IJSRuntime JS

<br/>


@if (artwork == null)
{
    <!-- Loading -->
    <p class="text-center"><i class="spinner-border spinner-border-sm me-2"></i>Kunstverk laster ...</p>
}
else
{   
    <div class="gallery-detail-wrapper position-relative">
        <div class="gallery-detail-header">
            
            <!-- Prev Artwork Button -->
            @if (prevArtwork is not null)
            {
                <button class="neighbor-button  prev " type="button" @onclick="() => PrevArtwork()">
                    <i class="fa-solid fa-angles-left"></i>
                    <span class="neighbor-label">Forrige</span>
                </button>
            }
        
        
            <!-- Tittel -->
            <h2 class="fw-bold fs-3 me-auto border-bottom ">@artwork?.Title</h2>
        
            <!-- Next Artwork Button -->
            @if (nextArtwork is not null)
            {
                <button class="neighbor-button next" type="button" @onclick="() => NextArtwork()">
                    <span class="neighbor-label">Neste</span><i class="fa-solid fa-angles-right"></i>
                </button>
            }
            
        </div>

        <!-- Artwork Content -->
        <div class="container-fluid px-5 d-flex justify-content-center">
            
            <div class="col-xl-10 d-flex flex-row flex-wrap justify-content-center">
                
                <div id="artworkCarousel"
                     class="carousel slide"
                     style="min-width: 60%; max-width:  80vw;"
                     data-bs-ride="false" data-bs-interval="false">
                    
                    
                    <!-- Image slides -->
                    <div class="carousel-inner">



                        @foreach (var img in artwork.Images)
                        {
                            <!-- Image -->
                            <div class="carousel-item  @(artwork.Images.IndexOf(img) == 0 ? "active" : "")">
                                <img src="@img.PreviewUrl"
                                     class="carousel-image"
                                     alt="@artwork.Title"
                                     @onclick="() => ShowDetailedImage(img.ImageUrl)"/>
                            </div>
                        }
                    </div>

                    <!-- Arrows only if >1 image -->
                    @if (artwork.Images.Count > 1)
                    {
                        <!-- Left arrow -->
                        <button class="carousel-control-prev" type="button" data-bs-target="#artworkCarousel" data-bs-slide="prev">
                            <span class="custom-carousel-arrow">
                                <i class="fa-solid fa-chevron-left"></i>
                            </span>
                        </button>

                        <!-- Right arrow -->
                        <button class="carousel-control-next" type="button" data-bs-target="#artworkCarousel" data-bs-slide="next">
                            <span class="custom-carousel-arrow">
                                <i class="fa-solid fa-chevron-right"></i>
                            </span>
                        </button>

                    }

                    <!-- Indicators -->
                    @if (artwork.Images.Count > 1)
                    {
                        <div class="carousel-indicators">
                            @for (int i = 0; i < artwork.Images.Count; i++)
                            {
                                <button type="button"
                                        data-bs-target="#artworkCarousel"
                                        data-bs-slide-to="@i"
                                        class="@(i == 0 ? "active" : "")"
                                        aria-current="@(i == 0 ? "true" : "false")"
                                        aria-label="Slide @(i + 1)">
                                    <i class="@(i == 0 ? "fa-solid fa-circle" : "fa-regular fa-circle")"></i>
                                </button>
                            }
                        </div>
                    }
                </div>
                <div class="art-detail-container">
                    <div class="art-detail-card">
                        <div class="d-flex align-items-start art-header">

                            <!-- Title to the Left 
                            <h2 class="fw-bold fs-3 me-auto">@artwork?.Title</h2> justify-content-between -->

                            <!-- Price and button to the Right -->
                            <div class="d-flex align-items-center gap-3 fs-5 price-section">
                                @if (artwork.ForSale)
                                {
                                    
                                    <!-- Buy button -->
                                    <a class="buy-button" href=@($"/checkout/{artworkId}")>
                                        Kjøp <i class="fa-solid fa-bag-shopping"></i>
                                    </a>
                                    <!-- Price tag -->
                                    <div class="d-flex gap-2 align-items-center">
                                        <span class="text-muted">Pris:</span>
                                        <span class="fw-semibold">@((artwork.Price?.ToString("F2") ?? "0.00")) ,-</span>
                                    </div>
                                }
                                else
                                {
                                    <!-- Not for sale tag -->
                                    <span class="badge bg-secondary">Ikke for salg</span>
                                }

                            </div>
                        </div>
                        <hr class="my-4"/>
                        <div class="d-flex justify-content-start gap-5 mb-2 flex-wrap">
                            @if (!string.IsNullOrWhiteSpace(artwork.Materials))
                            {
                                <!-- Materials -->
                                <div>
                                    <h6 class="text-secondary mb-1">Materialer:</h6>
                                    <p class="mb-0">@artwork.Materials</p>
                                </div>
                            }
                            @if (artwork.WidthDimension is not null && artwork.HeightDimension is not null)
                            {
                                <!-- Dimensions -->
                                <div>
                                    <h6 class="text-secondary mb-1">Dimensjoner:</h6>
                                    <p class="mb-0">@artwork.WidthDimension x @artwork.HeightDimension cm</p>
                                </div>
                            }
                        </div>
                        <!-- Description -->
                        <div class="mt-4" style="line-height: 1.7;">
                            <h6 class="text-secondary">Beskrivelse:</h6>
                            <p>@artwork.Description</p>
                        </div>

                    </div>
                </div>
            </div>
        </div>
        
    </div>
    
    
    
    <!-- Display errors-->
    @if (errors.Count > 0)
    {
        <h2>Feilmeldinger</h2>
        <ul class="text-danger">
            @foreach (var error in errors)
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
    }
    
    <br/><br/>
    
    <!-- Modal Image-->
    <div class="modal fade" id="imageModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-fullscreen">
            <div class="modal-content bg-dark bg-opacity-75 border-0 position-relative overflow-hidden">

                <!-- Exit button -->
                <button type="button"
                        class="btn-close position-absolute top-0 end-0 m-3 z-3"
                        data-bs-dismiss="modal"
                        aria-label="Close"
                        style="filter: invert(1); opacity: 0.85;">
                </button>

                <!-- Image -->
                <div class="modal-body d-flex justify-content-center align-items-center p-0 z-1">
                    <img id="modalImage"
                         src=""
                         class="img-fluid rounded shadow"
                         style="max-height: 95vh; pointer-events: none; image-rendering: smooth;" />

                </div>
            </div>
        </div>
    </div>
    
    
    <!-- Extra ADMIN option bar for artwork -->
    <AuthorizeView>
        <div class="navbarFont">
            <nav class="navbar navbar-expand-lg navbar-light bg-light border-bottom py-4">
                <div class="container">
                    <ul class="navbar-nav mx-auto flex-column flex-md-row gap-2 align-items-center">

                        <!-- Delete Artwork -->
                        <li class="nav-item">
                            <button type="button" data-bs-toggle="modal" data-bs-target="#deleteWarningModal"
                                    class="btn btn-sm btn-outline-danger">
                                Slett Kunstverk
                            </button>
                        </li>

                        <!-- Update Artwork -->
                        <li class="nav-item">
                            <NavLink class="btn btn-sm btn-outline-warning rounded px-2 py-1"
                                     href=@($"/update-artwork/{artworkId}")>
                                Endre Kunstverk
                            </NavLink>
                        </li>

                        <!-- Need meta-data in Html head - but need to add the real domain first -->
                        <li class="nav-item">
                            <a href="@($"https://www.facebook.com/sharer/sharer.php?u=https://joart.no/gallerydetail/{artworkId}")"
                               target="_blank"
                               class="btn btn-sm btn-outline-primary fw-bold rounded px-2 py-1 d-flex align-items-center gap-2">
                                <i class="fa-brands fa-facebook"></i> Del på Facebook
                            </a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
        <!-- Modal Delete Artwork -->
        <div class="modal fade" id="deleteWarningModal" tabindex="-1"
             aria-labelledby="modalDeleteWarning" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">

                    <!-- Header -->
                    <div class="modal-header">
                        <h5 class="modal-title" id="modalDeleteWarning">Bekreft sletting av kunstverk</h5>
                        <button type="button" class="btn-close"
                                data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>

                    <!-- Body -->
                    <div class="modal-body">
                        Er du sikker på at du ønsker å slette kunstverket?
                    </div>

                    <!-- Footer -->
                    <div class="modal-footer">
                        <button class="btn btn-secondary mb-2"
                                data-bs-dismiss="modal"
                                @onclick="CloseConfirmation">Avbryt</button>
                        <button class="btn btn-danger mb-2"
                                data-bs-dismiss="modal"
                                @onclick="ConfirmDelete">Slett Kunstverk</button>
                    </div>

                </div>
            </div>
        </div>
    </AuthorizeView>
}




@code {
    [Parameter] public int artworkId { get; set; }

    private ArtworkResponse? artwork;
    ImageResponse image;

    // Neighboors
    private int? prevArtwork;
    private int? nextArtwork;

    // Tracking old Id when moving to new artwork
    private int? lastArtworkId;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            artwork = await Http.GetFromJsonAsync<ArtworkResponse>($"/api/PublicGallery/artworks/{artworkId}");
            if (artwork.Images.Count > 0)
            {
                image = artwork.Images.FirstOrDefault();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Error fetching artwork data: " + e.Message);
        }

        if (artwork is not null)
        {
            try
            {
                var neighbors = await Http.GetFromJsonAsync<Neighbors>($"/api/PublicGallery/artworks/{artworkId}/neighbors");
                prevArtwork = neighbors.PreviousId;
                nextArtwork = neighbors.NextId;
            }
            catch (Exception e)
            {
                Console.WriteLine("Error fetching previous and next artwork Ids: " + e.Message);
            }
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || artworkId != lastArtworkId)
        {
            lastArtworkId = artworkId;

            await Task.Yield();

            await JS.InvokeVoidAsync("resetCarouselToFirst", "#artworkCarousel");
        }

    }


    private void PrevArtwork()
    {
        navigationManager.NavigateTo($"/GalleryDetail/{prevArtwork}");
    }

    private void NextArtwork()
    {
        navigationManager.NavigateTo($"/GalleryDetail/{nextArtwork}");
    }

    private async Task ShowDetailedImage(string imageUrl)
    {
        await JS.InvokeVoidAsync("showImageModal", imageUrl);
    }

    // Delete button trigger scenario
    private bool ShowConfirmation = false;

    // Error collections
    private List<ErrorResponse> errors = new();
    private string? ErrorMessage;

    // Delete warning 
    private void OpenConfirmation()
    {
        ShowConfirmation = true;
    }

    // Delete canceled -> abort deletion
    private void CloseConfirmation()
    {
        ShowConfirmation = false;
    }

    // Delete confirmed -> deleting artwork
    private async Task ConfirmDelete()
    {
        errors.Clear(); // Clear old errors before this attempt

        try
        {
            // 1) Retrieve JWT from AuthStateProvider
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var token = authState.User.FindFirst("JWT")?.Value;

            if (string.IsNullOrWhiteSpace(token))
            {
                ErrorMessage = "Bruker er ikke logget inn.";
                StateHasChanged();
                return;
            }

            // 2) Attach the token as a Bearer header
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // 3) Call the DELETE endpoint
            var response = await Http.DeleteAsync($"http://localhost:8080/admin/api/Gallery/delete-artwork/{artworkId}");

            Console.WriteLine($"Response status code: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                // 4a) On success, parse JSON into ArtworkResponse
                var deletedArtwork = await response.Content.ReadFromJsonAsync<ArtworkResponse>();
                var artworkTitle = deletedArtwork?.Title;

                // Navigate back to gallery with a query param indicating which item was deleted
                navigationManager.NavigateTo($"/gallery?deleted={artworkTitle}");
            }
            else
            {
                // 4b) On failure, check if the response is JSON
                var contentType = response.Content.Headers.ContentType?.MediaType;
                var contentString = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Response body on failure: {contentString}");

                if (!string.IsNullOrWhiteSpace(contentString) &&
                    contentType == "application/json")
                {
                    // Attempt to parse as our ErrorResponse
                    var errorObj = JsonSerializer.Deserialize<ErrorResponse>(contentString);
                    if (!string.IsNullOrWhiteSpace(errorObj?.ErrorMessage))
                    {
                        errors.Add(errorObj);
                    }
                    else
                    {
                        errors.Add(new ErrorResponse
                        {
                            ErrorMessage = $"Kunne ikke slette kunstverk (HTTP {(int)response.StatusCode})."
                        });
                    }
                }
                else
                {
                    // The server didn't return JSON, fallback to a generic error
                    errors.Add(new ErrorResponse
                    {
                        ErrorMessage = $"Kunne ikke slette kunstverk (HTTP {(int)response.StatusCode})."
                    });
                }
            }
        }
        catch (Exception ex)
        {
            // 5) Log and show unexpected error
            errors.Add(new ErrorResponse
            {
                ErrorMessage = "En uventet feil oppstod, og kunstverket ble ikke slettet."
            });

            Console.WriteLine($"\"En uventet feil oppstod: {ex}");
        }
        finally
        {
            // Hide any local "ShowConfirmation" modal
            ShowConfirmation = false;
        }
    }

}
