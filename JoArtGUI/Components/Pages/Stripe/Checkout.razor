@page "/checkout"
@using JoArtClassLib.Art
@using JoArtClassLib.AwsSecrets
@using JoArtClassLib.Error
@using JoArtClassLib.Payment
@inject IJSRuntime JS
@inject HttpClient Http



@if (product is null)
{
    <p>Laster produkt ...</p>
}
else
{
    <br/><br/>
    <div class="checkout-container mt-4">
        <div class="checkout-card">
            <h3 class="text-center mb-4">Betaling</h3>
            <hr class="my-4" />
            <div class="row d-flex align-items-start justify-content-center px-4">
                <h5 class="mb-4">Produkt</h5>
                <div class="col-md-auto">

                    <img src="@image?.ThumbnailUrl"
                         class="img-fluid rounded shadow-sm"
                         style="max-width: 300px;"/>
                </div>

                <div class="col-md pt-2">
                    <div class="mb-3">
                        <p class="mb-1 text-muted">Tittel:</p>
                        <p class="fw-semibold">@product.Title</p>
                    </div>
                    <div class="mb-3">
                        <p class="mb-1 text-muted">Dimensjoner:</p>
                        <p class="fw-semibold">@product.WidthDimension x @product.HeightDimension cm</p>
                    </div>
                    <div class="mb-3">
                        <p class="mb-1 text-muted">Pris:</p>
                        <p class="fw-bold fs-5 text-success">@(product.Price?.ToString("F2") ?? "0.00"),-</p>
                    </div>
                </div>
            </div>
            <hr class="my-4" />
            <h5 class="mb-4">Kunde informasjon</h5>
            <div class="form-group mb-3">
                <label>Fullt navn</label>
                <input class="form-control" @bind="buyer.FullName" required />
            </div>
            <div class="row mb-3">
                <div class="col-md-8">
                    <label>Epost</label>
                    <input type="email" class="form-control" @bind="buyer.Email" required />
                </div>
                <div class="col-md-4">
                    <label>Telefon</label>
                    <input class="form-control" maxlength="12" placeholder="+47..." @bind="buyer.PhoneNumber" required />
                </div>
            </div>
            <label class="fw-medium">Hvordan vil du motta kunstverket?</label>
            <div class="form-check mb-2">
                <input class="form-check-input" name="delivery" type="radio" id="pickup" value="Hentepunkt" 
                       @onchange="SetDeliveryMethod" checked="@("Hentepunkt" == buyer.DeliveryMethod)"/>
                <label class="form-check-label" for="pickup">Hentepunk: Sandefjord, Breidablikk (kr 0)</label>
            </div>
            <div class="form-check mb-2">
                <input class="form-check-input" name="delivery" type="radio" id="post" value="Post"
                       @onchange="SetDeliveryMethod" checked="@("Post" == buyer.DeliveryMethod)" />
                <label class="form-check-label" for="post">Posten (kr @shippingCost)</label>
            </div>
            @if (buyer.DeliveryMethod == "Post")
            {
                <div class="form-group mb-3">
                    <label>Adresse</label>
                    <input class="form-control" @bind="buyer.AddressLine" required />
                </div>
                <div class="row mb-3">
                    <div class="col-md-8">
                        <label>By</label>
                        <input class="form-control" @bind="buyer.City" required />
                    </div>
                    <div class="col-md-4">
                        <label>Postnummer</label>
                        <input class="form-control" maxlength="4" @bind="buyer.PostalCode" required />
                    </div>
                </div>
            }
            
            <hr class="my-4" />
            <div class="px-4 pb-4">
                <h5 class="mb-3">Betal med kort</h5>
                <div id="card-element" class="form-control p-3 shadow-sm rounded" style="max-width: 400px;"></div>
                <button class="btn btn-success mt-4" @onclick="HandlePayment">Betal nå</button>
                <p class="text-danger mt-2">@statusMessage</p>
            </div>
            
        </div>
    </div>
    
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="text-danger fw-bold">@ErrorMessage</p>
}

@code {
    // Produkt
    [Parameter]
    [SupplyParameterFromQuery]
    public int productId { get; set; }
    private ArtworkResponse? product;
    private ImageResponse? image;
    
    private decimal shippingCost;
    
    private List<ErrorResponse> errors = new();
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            product = await Http.GetFromJsonAsync<ArtworkResponse>($"api/PublicGallery/artworks/{productId}");
            if (product is null)
            {
                ErrorMessage = "Obs! Produktet eksisterer ikke lenger.";
                return;
            }
            image = product?.Images.FirstOrDefault();
            if (product is not null && product.WidthDimension is not null && product.HeightDimension is not null)
            shippingCost = CalculateShippingCosts();

        }
        catch (Exception e)
        {
            ErrorMessage = "Noe gikk galt ved henting av produktet.";
            Console.WriteLine("Error fetching artwork data: " + e.Message);
            
        }
    }

    
    // Calculating shipping costs - estimate only; need a registered business to use Posten (Bring) API
    public decimal CalculateShippingCosts()
    {
        var areal = product!.HeightDimension * product.WidthDimension;
        decimal costs;

        if (areal <= 2500) costs = ShippingCosts.Small;
        
        else if (areal <= 8100) costs = ShippingCosts.Medium;
        
        else costs = ShippingCosts.Large;

        return costs;

    }
    
    // BuyerInfo
    private BuyerInfo buyer = new();

    private void SetDeliveryMethod(ChangeEventArgs e)
    {
        buyer.DeliveryMethod = e.Value?.ToString() ?? "";
    }
    
    // Stripe element
    private string statusMessage = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && product != null)
        {
            // Get clientSecret from API
            var response = await Http.PostAsync($"http://localhost:8080/api/stripe/create-intent/{productId}", null);
            var json = await response.Content.ReadFromJsonAsync<PaymentIntentResponse>();
            string clientSecret = json?.ClientSecret ?? "";
            string publishableKey = "pk_test_...";

            await JS.InvokeVoidAsync("initializeStripe", publishableKey, clientSecret);
        }
    }

    private async Task HandlePayment()
    {
        statusMessage = "Behandler betaling ...";
        var result = await JS.InvokeAsync<StripeResult>("confirmCardPayment");

        if (result.error != null)
        {
            statusMessage = $"Feil: {result.error.message}";
        }
        else
        {
            statusMessage = "Betaling er fullført!";
        }
    }
}
