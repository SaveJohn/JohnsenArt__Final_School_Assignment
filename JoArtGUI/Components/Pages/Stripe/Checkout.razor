@page "/checkout"
@using JoArtClassLib.Art
@using JoArtClassLib.AwsSecrets
@using JoArtClassLib.Error
@using JoArtClassLib.Payment
@inject IJSRuntime JS
@inject HttpClient Http



@if (product is null)
{
    <p>Laster produkt ...</p>
}
else
{
    <br/><br/>
    <div class="checkout-container mt-4">
        <div class="checkout-card">
            <h3 class="text-center mb-4">Betaling</h3>
            <hr class="my-4" />
            <div class="row d-flex align-items-start justify-content-center px-4">
                <h5 class="mb-4">Produkt</h5>
                <div class="col-md-auto">

                    <img src="@image?.ThumbnailUrl"
                         class="img-fluid rounded shadow-sm"
                         style="max-width: 300px;"/>
                </div>

                <div class="col-md pt-2">
                    <div class="mb-3">
                        <p class="mb-1 text-muted">Tittel:</p>
                        <p class="fw-semibold">@product.Title</p>
                    </div>
                    <div class="mb-3">
                        <p class="mb-1 text-muted">Dimensjoner:</p>
                        <p class="fw-semibold">@product.WidthDimension x @product.HeightDimension cm</p>
                    </div>
                    <div class="mb-3">
                        <p class="mb-1 text-muted">Pris:</p>
                        <p class="fw-bold fs-5 text-success">@(product.Price?.ToString("F2") ?? "0.00"),-</p>
                    </div>
                </div>
            </div>
            <hr class="my-4" />
            <h5 class="mb-4">Kunde informasjon</h5>
            <div class="form-group mb-3">
                <label>Fullt navn <span class="text-danger">*</span></label>
                <input class="form-control" @bind="buyer.FullName" required />
            </div>
            <div class="row mb-3">
                <div class="col-md-8">
                    <label>Epost <span class="text-danger">*</span></label>
                    <input type="email" class="form-control" @bind="buyer.Email" required />
                </div>
                <div class="col-md-4">
                    <label>Telefon <small class="text-muted">Valgfritt </small></label> 
                    <input class="form-control" maxlength="12" placeholder="+47..." @bind="buyer.PhoneNumber" />
                </div>
            </div>
            <label class="fw-medium">Hvordan vil du motta kunstverket? <span class="text-danger">*</span></label>
            <div class="form-check mb-2">
                <input class="form-check-input" name="delivery" type="radio" id="pickup" value="Hentepunkt" 
                       @onchange="SetDeliveryMethod" checked="@("Hentepunkt" == buyer.DeliveryMethod)"/>
                <label class="form-check-label" for="pickup">Hentepunk: Sandefjord, Breidablikk (kr 0)</label>
            </div>
            <div class="form-check mb-2">
                <input class="form-check-input" name="delivery" type="radio" id="post" value="Post"
                       @onchange="SetDeliveryMethod" checked="@("Post" == buyer.DeliveryMethod)" />
                <label class="form-check-label" for="post">Posten (kr @shippingCost)</label>
            </div>
            @if (buyer.DeliveryMethod == "Post")
            {
                <div class="form-group mb-3">
                    <label>Adresse <span class="text-danger">*</span></label>
                    <input class="form-control" @bind="buyer.AddressLine" required />
                </div>
                <div class="row mb-3">
                    <div class="col-md-8">
                        <label>By <span class="text-danger">*</span></label>
                        <input class="form-control" @bind="buyer.City" required />
                    </div>
                    <div class="col-md-4">
                        <label>Postnummer <span class="text-danger">*</span></label>
                        <input class="form-control" maxlength="4" @bind="buyer.PostalCode" required />
                    </div>
                </div>
            }
            
            <hr class="my-4" />
            <div class="px-4 pb-4">
                <h5 class="mb-3">Betal med kort</h5>
                <div id="card-element" class="stripe-card-wrapper" style="max-width: 400px;"></div>
                <button class="btn btn-success mt-4" @onclick="HandlePayment">Betal nå</button>
                <p class="text-danger mt-2">@statusMessage</p>
            </div>
            
        </div>
    </div>
    
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="text-danger fw-bold">@ErrorMessage</p>
}

@code {
    // Produkt
    [Parameter]
    [SupplyParameterFromQuery]
    public int productId { get; set; }
    private ArtworkResponse? product;
    private ImageResponse? image;
    
    private decimal shippingCost;
    
    private List<ErrorResponse> errors = new();
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            product = await Http.GetFromJsonAsync<ArtworkResponse>($"api/PublicGallery/artworks/{productId}");
            if (product is null)
            {
                ErrorMessage = "Obs! Produktet eksisterer ikke lenger.";
                return;
            }
            image = product?.Images.FirstOrDefault();
            if (product is not null && product.WidthDimension is not null && product.HeightDimension is not null)
            shippingCost = CalculateShippingCosts();

            await SetupStripeAsync();

        }
        catch (Exception e)
        {
            ErrorMessage = "Noe gikk galt ved henting av produktet.";
            Console.WriteLine("Error fetching artwork data: " + e.Message);
            
        }
    }

    
    // Calculating shipping costs - estimate only; need a registered business to use Posten (Bring) API
    public decimal CalculateShippingCosts()
    {
        var areal = product!.HeightDimension * product.WidthDimension;
        decimal costs;

        if (areal <= 2500) costs = ShippingCosts.Small;
        
        else if (areal <= 8100) costs = ShippingCosts.Medium;
        
        else costs = ShippingCosts.Large;

        return costs;

    }
    
    // BuyerInfo
    private BuyerInfo buyer = new();

    private void SetDeliveryMethod(ChangeEventArgs e)
    {
        buyer.DeliveryMethod = e.Value?.ToString() ?? "";
    }

    private bool ValidateBuyerInfo()
    {
        // Fullname and Email required
        if (string.IsNullOrWhiteSpace(buyer.FullName) || string.IsNullOrWhiteSpace(buyer.Email))
        {
            statusMessage = "Vennligst sørg for at både navn og epost er fylt ut.";
            return false;
        }
        
        // Valid Email check
        if (!System.Text.RegularExpressions.Regex.IsMatch(buyer.Email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
        {
            statusMessage = "Ugyldig e-postadresse.";
            return false;
        }
        
        // Valid Phone check
        if (!System.Text.RegularExpressions.Regex.IsMatch(buyer.PhoneNumber, @"^\+?\d{8,15}$"))
        {
            statusMessage = "Ugyldig telefonnummer.";
            return false;
        }
        
        // Delivery Method required
        if (string.IsNullOrWhiteSpace(buyer.DeliveryMethod))
        {
            statusMessage = "Vennligst velg en leveringsmetode";
            return false;
        }
        
        // If Post method, then Address Line, City and Postalcode required
        if (buyer.DeliveryMethod == "Post" &&
            (string.IsNullOrWhiteSpace(buyer.AddressLine) ||
             string.IsNullOrWhiteSpace(buyer.City) ||
             string.IsNullOrWhiteSpace(buyer.PostalCode)))
        {
            statusMessage = "Vennligst fyll ut adresse, by og postnummer for postlevering.";
            return false;
        }

        return true;
    }
    
    // Stripe element
    private IJSObjectReference? stripeModule;
    private string statusMessage = "";

    private async Task SetupStripeAsync()
    {
        try
        {
            // Get payment intent (client secret)
            var response = await Http.PostAsync($"http://localhost:8080/api/stripe/create-intent/{productId}", null);
            var intent = await response.Content.ReadFromJsonAsync<PaymentIntentResponse>();
            var clientSecret = intent?.ClientSecret ?? "";
            Console.WriteLine($"ClientSecret: {clientSecret}");
            
            // Get publishable key
            var keyResponse = await Http.GetFromJsonAsync<PublishableKeyResponse>("http://localhost:8080/api/stripe/publishable-key");
            var publishableKey = keyResponse?.PublishableKey;
            Console.WriteLine($"PublishableKey: {publishableKey}");
            
            // Calling js method 
            if (!string.IsNullOrWhiteSpace(clientSecret) && !string.IsNullOrWhiteSpace(publishableKey))
            {
                // Ensure DOM is fully updated
                await InvokeAsync(StateHasChanged);
                
                Console.WriteLine("Loading Stripe module...");
                stripeModule = await JS.InvokeAsync<IJSObjectReference>("import", "/js/stripeInterop.js");
                Console.WriteLine("Stripe module loaded.");

                await stripeModule.InvokeVoidAsync("initializeStripe", publishableKey, clientSecret);
                Console.WriteLine("initializeStripe js function called.");
            }
            else
            {
                statusMessage = "Klarte ikke hente Stripe-nøkler";
                Console.WriteLine($"Klarte ikke hente stripe nøkler - client secret: {clientSecret} publishable key: {publishableKey}");
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Stripe error: {ex.Message}");
            statusMessage = "Noe gikk galt ved oppsett av Stripe.";
        }
        
    }
        
    

    private async Task HandlePayment()
    {
        if (!ValidateBuyerInfo())
        {
            return;
        }
        if (stripeModule is null)
        {
            statusMessage = "Stripe ble ikke initialisert. Prøv å laste siden på nytt.";
            Console.WriteLine("Stripe Module er null");
            return;
        }

        try
        {
            statusMessage = "Behandler betaling ...";

            var result = await stripeModule.InvokeAsync<StripeResult>("confirmCardPayment");

            if (result.error != null)
            {
                statusMessage = $"Feil: {result.error.message}";
            }
            else
            {
                statusMessage = "Betaling er fullført!";
            }
        }
        catch (Exception ex)
        {
            statusMessage = "En feil oppstod under betaling.";
            Console.WriteLine($"Stripe betaling feilet: {ex.Message}");
        }
    }
}
