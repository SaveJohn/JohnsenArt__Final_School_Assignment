@page "/checkout/{productId:int}"
@using System.Text.Json
@using JoArtClassLib.Art
@using JoArtClassLib.Error
@using JoArtClassLib.Payment
@using JoArtClassLib.Payment.Enums
@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Navigation



@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="text-danger fw-bold">@ErrorMessage</p>
}
else if (isLoading)
{
    <p class="text-center pt-5"><i class="spinner-border spinner-border-sm me-2"></i>Laster produkt ...</p>
}
else if (product is not null)
{

    <div class="checkout-container">
        <div class="checkout-card">
            <h3 class="text-center mb-4">Betaling</h3>
            <hr class="my-4" />
            <div class="row d-flex align-items-start justify-content-center px-4">
                <h5 class="mb-4">Produkt</h5>
                <div class="col-md-auto">

                    <img src="@image?.ThumbnailUrl"
                         class="img-fluid rounded shadow-sm"
                         style="max-width: 300px;"/>
                </div>

                <div class="col-md pt-2">
                    <div class="mb-3">
                        <p class="mb-1 text-muted">Tittel:</p>
                        <p class="fw-semibold">@product.Title</p>
                    </div>
                    <div class="mb-3">
                        <p class="mb-1 text-muted">Dimensjoner:</p>
                        <p class="fw-semibold">@product.WidthDimension x @product.HeightDimension cm</p>
                    </div>
                    <div class="mb-3">
                        <p class="mb-1 text-muted">Pris:</p>
                        <p class="fw-semibold">@((product?.Price ?? 0).ToString("F2")),-</p>
                    </div>
                </div>
                
            </div>
            <hr class="my-4" />
            <h5 class="mb-4">Kunde informasjon</h5>
            <div class="form-group mb-3">
                <label>Fullt navn <span class="text-danger">*</span></label>
                <input class="form-control" name="fullName" @bind="buyer.FullName" required />
            </div>
            <div class="row mb-3">
                <div class="col-md-8">
                    <label>Epost <span class="text-danger">*</span></label>
                    <input type="email" class="form-control" @bind="buyer.Email" required />
                </div>
                <div class="col-md-4">
                    <label>Telefon <span class="text-danger">*</span></label> 
                    <input class="form-control" maxlength="12" placeholder="+47..." @bind="buyer.PhoneNumber" />
                </div>
            </div>
            <label class="fw-medium">Hvordan vil du motta kunstverket? <span class="text-danger">*</span></label>
            <div class="form-check mb-2">
                <input class="form-check-input" name="delivery" type="radio" id="pickup" value="@DeliveryMethods.PickUp.ToString()" 
                       @onchange="SetDeliveryMethod" checked="@(DeliveryMethods.PickUp.ToString() == buyer.DeliveryMethod)"/>
                <label class="form-check-label" for="pickup">Hentepunk: Sandefjord, Breidablikk (kr @ShippingCosts.PickUp)
                </label>
            </div>
            <div class="form-check mb-2">
                <input class="form-check-input" name="delivery" type="radio" id="post" value="@DeliveryMethods.Post.ToString()"
                       @onchange="SetDeliveryMethod" checked="@(DeliveryMethods.Post.ToString() == buyer.DeliveryMethod)" />
                <label class="form-check-label" for="post">Posten (kr @shippingCost)</label>
            </div>
            @if (buyer.DeliveryMethod == DeliveryMethods.Post.ToString())
            {
                <div class="form-group mb-3">
                    <label>Adresse <span class="text-danger">*</span></label>
                    <input class="form-control" @bind="buyer.AddressLine" required />
                </div>
                <div class="row mb-3">
                    <div class="col-md-3">
                        <label>Postnummer <span class="text-danger">*</span></label>
                        <input class="form-control" maxlength="4" @bind="buyer.PostalCode" required/>
                    </div>
                    <div class="col-md-8">
                        <label>By <span class="text-danger">*</span></label>
                        <input class="form-control" @bind="buyer.City" required />
                    </div>
                </div>
            }
            
            <hr class="my-4" />
            
            <h5 class="mb-4">Pris oppsummering</h5>
            <div class="mt-2 px-4 pt-3">
                <div class="d-flex justify-content-between">
                    <p class="mb-1 text-muted">Kunstverk:</p>
                    <p class="mb-1">@((product?.Price ?? 0).ToString("F2")),-</p>
                </div>
                @if (!string.IsNullOrWhiteSpace(buyer.DeliveryMethod))
                {
                    <div class="d-flex justify-content-between">
                        <p class="mb-1 text-muted">Frakt:</p>
                        @if (buyer.DeliveryMethod == DeliveryMethods.PickUp.ToString())
                        {
                            <p class="mb-1">@ShippingCosts.PickUp,-</p>
                        }
                        else
                        {
                            <p class="mb-1">@((shippingCost ?? 0).ToString("F2")),-</p>
                        }
                    </div>
                    <div class="d-flex justify-content-between">
                        <p class="fw-bold fs-5 mb-0">Total å betale:</p>
                        <p class="fw-bold fs-5 mb-0">
                            @(((shippingCost ?? 0) + (product?.Price ?? 0)).ToString("F2")),-

                        </p>
                    </div>
                }
            </div>
            
            <hr class="my-4" />
            <div class="d-flex justify-content-between">
                <h5 class="mb-4">Betalingsmetode</h5>
                <p class="fw-medium text-muted">Velg en betalingsmetode for å fortsette<span class="text-danger">*</span></p>
            </div>
            
            <div class="form-check mb-2">
                <input class="form-check-input" name="card" type="radio" id="card-payment" value="@PaymentMethods.Card.ToString()"
                       @onchange="SetPaymentMethod" checked="@(PaymentMethods.Card.ToString() == paymentMethod.Selected)"/>
                <label class="form-check-label" for="card-payment">
                    Kredittkort eller debetkort
                    <img src="Images/credit-card.png" alt="Kort ikon" class="px-3" style="height: 25px;" />
                       
                </label>
            </div>
            @if (paymentMethod.Selected == PaymentMethods.Card.ToString())
            {
                <div class="form-check mb-2">
                    <div class="stripe-card-wrapper"style="max-width: 400px">
                        <label for="card-number-element" class="form-label">kortnummer</label>
                        <div id="card-number-element" class="form-control mb-3 py-2"></div>

                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label for="card-expiry-element" class="form-label">Utløpsdato</label>
                                <div id="card-expiry-element" class="form-control"></div>
                            </div>
                            <div class="col-md-4">
                                <label for="card-cvc-element" class="form-label">CVC</label>
                                <div id="card-cvc-element" class="form-control"></div>
                            </div>
                        </div>
                    </div>
                </div>
                @if (!isStripeReady)
                {
                    <p class="text-muted"><i class="spinner-border spinner-border-sm me-2"></i>Laster stripe ...</p>
                }
            }
            @if (buyer.DeliveryMethod != DeliveryMethods.PickUp.ToString())
            {
                <div class="form-check mb-2 pt-4">
                    <input class="form-check-input" name="klarna" type="radio" id="klarna-payment" value="@PaymentMethods.Klarna.ToString()"
                           @onchange="SetPaymentMethod" checked="@(PaymentMethods.Klarna.ToString() == paymentMethod.Selected)" />
                    <label class="form-check-label" for="klarna-payment">
                        Betal med Klarna 
                        <img src="Images/klarna.png" alt="klarna ikon" class="px-3" style="height: 25px;"/>
                    </label>
                </div>
            }
            
            @if (paymentMethod.Selected == PaymentMethods.Card.ToString())
            {
                
                <div class="text-center py-4 ">
                    <button class="button-buy mt-4" @onclick="HandlePayment" disabled="@(isStripeReady == false)">
                        Betal nå
                    </button>
                    <p class="text-danger mt-2">@statusMessage</p>
                </div>
            }
            else if (paymentMethod.Selected == PaymentMethods.Klarna.ToString())
            {
                <div class="text-center py-4 ">
                    <button class="button-buy mt-2" @onclick="HandlePayment">Betal med Klarna</button>
                </div>
                @if (klarnaIsLoaded is false)
                {
                    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);" role="dialog">
                        <div class="modal-dialog modal-dialog-centered" role="document">
                            <div class="modal-content text-centered p-4 shadow-lg border-0 rounded-3">
                                <h5 class="fw-bold"><i class="spinner-border spinner-border-sm me-2"></i>Henter Klarna ...</h5>
                                <p class="text-muted">Vennligst vent mens vi klargjør betalingsvinduet ditt.</p>
                            </div>
                        </div>
                    </div>
                    <div class="modal-backdrop fade show"></div>
                    
                }
                
            }
            
            
        </div>
    </div>
    
}
else
{
    <p class="text-danger text-center pt-5 fw-bold">Fant ikke produktet.</p>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="text-danger fw-bold">@ErrorMessage</p>
}

@code {
    // Produkt
    private bool isLoading = true;
    
    [Parameter]
    public int productId { get; set; }
    private ArtworkResponse? product;
    private ImageResponse? image;

    private decimal? shippingCost;
    PaymentMethod paymentMethod = new ();
    
    private List<ErrorResponse> errors = new();
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"Hentet produktId: {productId}");
        try
        {
            var response = await Http.GetAsync($"api/PublicGallery/artworks/{productId}");
            var content = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Raw data from API:\n{content}");

            if (!response.IsSuccessStatusCode)
            {
                ErrorMessage = $"Klarte ikke hente produktet. Statuskode: {response.StatusCode}";
            }
            
            product = JsonSerializer.Deserialize<ArtworkResponse>(content, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            Console.WriteLine($"Product fetched: {product?.Title}");

            image = product?.Images?.FirstOrDefault();

            if (product?.WidthDimension is not null && product.HeightDimension is not null)
            {
                shippingCost = CalculateShippingCosts();
            }
            
            isLoading = false;
            await InvokeAsync(StateHasChanged);
            
        }
        catch (Exception e)
        {
            ErrorMessage = "Noe gikk galt ved henting av produktet.";
            Console.WriteLine("Error fetching artwork data: " + e.Message);
            
        }
    }


    // BuyerInfo
    private BuyerInfo buyer = new();

    private void SetDeliveryMethod(ChangeEventArgs e)
    {
        buyer.DeliveryMethod = e.Value?.ToString() ?? "";
        shippingCost = CalculateShippingCosts();
        
    }

    private bool ValidateBuyerInfo()
    {
        // Fullname and Email required
        if (string.IsNullOrWhiteSpace(buyer.FullName) || string.IsNullOrWhiteSpace(buyer.Email))
        {
            statusMessage = "Vennligst sørg for at både navn og epost er fylt ut.";
            return false;
        }
        
        // Valid Email check
        if (!System.Text.RegularExpressions.Regex.IsMatch(buyer.Email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
        {
            statusMessage = "Ugyldig e-postadresse.";
            return false;
        }
        
        // Valid Phone check
        if (!System.Text.RegularExpressions.Regex.IsMatch(buyer.PhoneNumber, @"^\+?\d{8,15}$"))
        {
            statusMessage = "Ugyldig telefonnummer.";
            return false;
        }
        
        // Delivery Method required
        if (string.IsNullOrWhiteSpace(buyer.DeliveryMethod))
        {
            statusMessage = "Vennligst velg en leveringsmetode";
            return false;
        }
        
        // If Post method, then Address Line, City and Postalcode required
        if (buyer.DeliveryMethod == DeliveryMethods.Post.ToString() &&
            (string.IsNullOrWhiteSpace(buyer.AddressLine) ||
             string.IsNullOrWhiteSpace(buyer.City) ||
             string.IsNullOrWhiteSpace(buyer.PostalCode)))
        {
            statusMessage = "Vennligst fyll ut adresse, by og postnummer for postlevering.";
            return false;
        }

        return true;
    }
    
    // Calculating shipping costs - estimate only; need a registered business to use Posten (Bring) API
    public decimal CalculateShippingCosts()
    {
        
        var areal = product!.HeightDimension * product.WidthDimension;
        decimal costs;

        if (areal <= 2500) costs = ShippingCosts.Small;
    
        else if (areal <= 8100) costs = ShippingCosts.Medium;
    
        else costs = ShippingCosts.Large;
        
        
        return costs;

    }
    
    // Stripe Payment setup
    private IJSObjectReference? stripeModule;
    private string statusMessage = "";
    bool isStripeReady;
    bool? klarnaIsLoaded = null;
    
    private async Task SetupStripeAsync()
    {
        if (isStripeReady) return;
        
        try
        {
            // Get payment intent (client secret)
            var response = await Http.PostAsync($"http://localhost:8080/api/stripe/create-intent/{productId}", null);
            var intent = await response.Content.ReadFromJsonAsync<PaymentIntentResponse>();
            var clientSecret = intent?.ClientSecret ?? "";
            Console.WriteLine($"ClientSecret: {clientSecret}");
            
            // Get publishable key
            var keyResponse = await Http.GetFromJsonAsync<PublishableKeyResponse>("http://localhost:8080/api/stripe/publishable-key");
            var publishableKey = keyResponse?.PublishableKey;
            Console.WriteLine($"PublishableKey: {publishableKey}");
            
            // Calling js method 
            if (!string.IsNullOrWhiteSpace(clientSecret) && !string.IsNullOrWhiteSpace(publishableKey))
            {
                // Ensure DOM is fully updated
                await InvokeAsync(StateHasChanged);
                
                Console.WriteLine("Loading Stripe module...");
                stripeModule = await JS.InvokeAsync<IJSObjectReference>("import", "/js/stripeInterop.js");
                Console.WriteLine("Stripe module loaded.");
                
                await stripeModule.InvokeVoidAsync("setProductId", productId); // product Id is so Klarna can redirect back
                await stripeModule.InvokeVoidAsync("initializeStripe", publishableKey, clientSecret);
                Console.WriteLine("initializeStripe js function called.");
                
                isStripeReady = true;
                StateHasChanged();
            }
            else
            {
                statusMessage = "Klarte ikke hente Stripe-nøkler";
                Console.WriteLine($"Klarte ikke hente stripe nøkler - client secret: {clientSecret} publishable key: {publishableKey}");
            }
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Stripe error: {ex.Message}");
            statusMessage = "Noe gikk galt ved oppsett av Stripe.";
        }
        
    }
    
    private async void SetPaymentMethod(ChangeEventArgs e)
    {
        // Setting payment method
        var newType = e.Value?.ToString() ?? "";
        paymentMethod.Selected = newType;

        if (stripeModule is null || !isStripeReady)
        {
            await SetupStripeAsync(); 
        }
        
        // if payment method is Card -> mount card elements
        if (newType == PaymentMethods.Card.ToString())
        {
            // Delay to make sure DOM is updated
            await Task.Delay(100); 
            await stripeModule.InvokeVoidAsync("mountCardElements");
        }
        
    }
    
    private async Task HandlePayment()
    {
        // Validating buyer input
        if (!ValidateBuyerInfo())
        {
            return;
        }
        
        // Checking stripe module
        if (stripeModule is null)
        {
            statusMessage = "Stripe ble ikke initialisert. Prøv å laste siden på nytt.";
            Console.WriteLine("Stripe Module er null");
            return;
        }

        try
        {
            // Pay with Card
            if (paymentMethod.Selected == PaymentMethods.Card.ToString())
            {
                var result = await stripeModule.InvokeAsync<StripeResult>("confirmCardPayment");
                Console.WriteLine("Card payment complete");
                
                if (result?.error != null)
                {
                    statusMessage = result.error.message;
                }
                else if (result?.paymentIntent?.status == "succeeded")
                {
                    await JS.InvokeVoidAsync("localStorage.removeItem", "stripeKey");
                    Navigation.NavigateTo("/takk", forceLoad: true);
                }
                else
                {
                    statusMessage = $"Betaling feilet eller ufullstendig: {result?.paymentIntent?.status}";
                }
            }
            // Pay with Klarna - payment status will be handled in OnParameterAsync()
            else
            {
                klarnaIsLoaded = false;
                var result = await stripeModule.InvokeAsync<StripeResult>("confirmKlarnaPayment");
                klarnaIsLoaded = true;
                
                if (result?.error != null)
                {
                    statusMessage = result.error.message;
                }
            }
            
        }
        catch (Exception ex)
        {
            statusMessage = "En feil oppstod under betaling.";
            Console.WriteLine($"Stripe betaling feilet: {ex.Message}");
        }
    }
    
    // Klarna Payment status 
    [SupplyParameterFromQuery]
    public string? payment_intent_client_secret { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(payment_intent_client_secret))
        {
            try
            {
                stripeModule ??= await JS.InvokeAsync<IJSObjectReference>("import", "/js/stripeInterop.js");
                
                var status = await stripeModule.InvokeAsync<string>("checkPaymentStatus");
                
                Console.WriteLine($"Betalingsstatus: {status}");
                
                if (!string.IsNullOrWhiteSpace(status))
                {
                    switch (status)
                    {
                        case "succeeded":
                            await JS.InvokeVoidAsync("localStorage.removeItem", "stripeKey");
                            Navigation.NavigateTo("/takk", forceLoad: true);
                            break;
                        case "processing":
                            statusMessage = "Betaling pågår - du vil motta en bekreftelse snart.";
                            break;
                        case "requires_payment_method":
                            statusMessage = "Betaling feilet. Prøv igjen.";
                            break;
                        default:
                            statusMessage = $"Status: {status}";
                            break;
                    }

                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Feil ved henting av betalingsstatus: {ex.Message}");
            }
        }
    }
}

