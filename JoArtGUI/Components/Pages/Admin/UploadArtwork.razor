@page "/admin/upload-artwork"
@attribute [Authorize]
@using JoArtClassLib.Art
@using JoArtClassLib.Error
@inject HttpClient Http
@using Microsoft.AspNetCore.Authorization
@inject IJSRuntime JS
@inject NavigationManager Navigation

<PageTitle>Lastopp nytt kunstverk</PageTitle>


<div class="upload-artwork-container text-bg-light">
    <div class="upload-card">
        <h4 class="text-center">Last Opp Kunstverk</h4>
        <EditForm Model="_artworkRequest" OnValidSubmit="SubmitArtworkAsync">


        <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="title">Tittel:</label><br/>
                <InputText class="form-control" @bind-Value="_artworkRequest.Title" placeholder="Tittel"/>
            </div>
            <!-- Add Artwork Image -->
            <div class="mb-3">
                <label for="artwork-image" class="form-lable">Last opp kunstverk bilde-fil:</label>
                <InputFile id="artworkFileInput" @ref="_artworkInputRef" OnChange="LoadArtworkImage" class="d-none" />
            </div>
            <div class="d-flex flex-wrap gap-3">
                <!-- Thumbnail preview of added image(s) -->
                @for (int i = 0; i < _artworkImages.Count; i++)
                {
                    var localIndex = i;
                    <div class="position-relative shadow-sm border rounded" style="width: 100px; height: 100px; ">
                        <img src="@_artworkImages[localIndex]" class="img-thumbnail w-100 h-100" style="object-fit: cover;"/>
                        <button type="button"
                                class="btn-close position-absolute top-0 end-0"
                                @onclick="@(() => RemoveArtworkImage(localIndex))"
                                title="Fjern bilde">
                        </button>
                    </div>
                }
                <!-- Add Image Button -->
                <div class="image-upload-slot" @onclick="TriggerArtworkFileDialog">
                    <span class="plus-icon">+</span>
                </div>

            </div>

            <!-- Add Wall preview -->
            <div class="mb-3">
                <label for="artwork-image" class="form-lable">Last opp visning av kunstverk på vegg:</label>
                <InputFile id="wallFileInput" @ref="_wallInputRef" OnChange="LoadArtworkWallpreview" class="d-none" />
            </div>
            <div class="d-flex flex-wrap gap-3">
                <!-- Thumbnail preview of added image(s) -->
                @for (int i = 0; i < _wallPreviewImages.Count; i++)
                {
                    var localIndex = i;
                    <div class="position-relative shadow-sm border rounded" style="width: 100px; height: 100px; ">
                        <img src="@_wallPreviewImages[localIndex]" class="img-thumbnail w-100 h-100" style="object-fit: cover;"/>
                        <button type="button"
                                class="btn-close position-absolute top-0 end-0"
                                @onclick="@(() => RemoveWallPreviewImage(localIndex))"
                                title="Fjern bilde">
                        </button>
                    </div>
                }
                <!-- Add Image Button -->
                <div class="image-upload-slot" @onclick="TriggerWallFileDialog">
                    <span class="plus-icon">+</span>
                </div>

            </div>

            <!-- Description -->
            <div class="mb-3">
                <label for="description">Tekst beskrivelse til kunstverk:</label>
                <InputText class="form-control" @bind-Value="_artworkRequest.Description" placeholder="Bilde tekst"/>
            </div>

            <!-- Width and height -->
            <div class="mb-3">
                <label for="width">Bredde (cm):</label>
                <InputNumber class="form-control" @bind-Value="_artworkRequest.WidthDimension"/>
            </div>

            <div class="mb-3">
                <label for="height">Høyde (cm):</label>
                <InputNumber class="form-control" @bind-Value="_artworkRequest.HeightDimension"/>
            </div>

            <!-- For sale? -->
            <div class="mb-3 form-check">
                <InputCheckbox @bind-Value="_artworkRequest.ForSale" class="form-check-input" id="forSaleCheckbox" />
                <label class="form-check-label" for="forSaleCheckbox">Til salgs</label>
            </div>

            <div class="mb-3">
                <label for="price">Pris (kr):</label>
                <InputNumber class="form-control"
                             @bind-Value="_artworkRequest.Price"
                             disabled="@(!_artworkRequest.ForSale)"
                             id="price"
                             placeholder="Oppgi pris"
                />
            </div>
            @if (!string.IsNullOrWhiteSpace(ErrorMessage))
            {
                <div class="alert alert-danger mt-3">@ErrorMessage</div>
            }


            <button class="btn btn-primary w-100" type="submit">Last Opp</button>

        </EditForm>
    </div>
</div>



@if (errors.Count > 0)
{
    <h2>Feilmeldinger</h2>
    <ul class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}
@code {
    private ArtworkRequest _artworkRequest = new();
    private ImageRequest? _imageRequest;
    private List<string> _artworkImages = new();
    private List<string> _wallPreviewImages = new();
    private InputFile? _artworkInputRef;
    private InputFile? _wallInputRef;

    private List<(byte[] data, string contentType, string fileName)> _artworkFiles = new();
    private List<(byte[] data, string contentType, string fileName)> _wallPreviewFiles = new();

    private long maxFileSize = 1024 * 1024 * 10; // Max 10MB
    private List<ErrorResponse> errors = new();
    private string? ErrorMessage;

    private async Task LoadArtworkImage(InputFileChangeEventArgs e)
    {
        errors.Clear();
        foreach (IBrowserFile file in e.GetMultipleFiles())
        {
            using var stream = file.OpenReadStream(maxFileSize);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var bytes = ms.ToArray();
            var base64 = Convert.ToBase64String(bytes);
            var imageDataUrl = $"data:{file.ContentType};base64,{base64}";
            _artworkImages.Add(imageDataUrl);
            _artworkFiles.Add((bytes, file.ContentType, file.Name));
        }
    }

    private async Task LoadArtworkWallpreview(InputFileChangeEventArgs e)
    {
        errors.Clear();
        foreach (IBrowserFile file in e.GetMultipleFiles())
        {
            using var stream = file.OpenReadStream(maxFileSize);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var bytes = ms.ToArray();
            var base64 = Convert.ToBase64String(bytes);
            var imageDataUrl = $"data:{file.ContentType};base64,{base64}";
            _wallPreviewImages.Add(imageDataUrl);
            _wallPreviewFiles.Add((bytes, file.ContentType, file.Name));
        }
    }

    private async Task TriggerArtworkFileDialog()
    {
        await JS.InvokeVoidAsync("triggerClick", "artworkFileInput");
    }

    private async Task TriggerWallFileDialog()
    {
        await JS.InvokeVoidAsync("triggerClick", "wallFileInput");
    }

    private void RemoveArtworkImage(int index)
    {
        if (_artworkFiles.Count > index && _artworkImages.Count > index)
        {
            _artworkImages.RemoveAt(index);
            _artworkFiles.RemoveAt(index);
        }
    }

    private void RemoveWallPreviewImage(int index)
    {
        if (_wallPreviewFiles.Count > index && _wallPreviewImages.Count > index)
        {
            _wallPreviewImages.RemoveAt(index);
            _wallPreviewFiles.RemoveAt(index);
        }
    }

    private async Task SubmitArtworkAsync()
    {
        Console.WriteLine("Submit Artwork hit.");
        
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "jwt");

    if (string.IsNullOrWhiteSpace(token))
    {
        ErrorMessage = "Bruker er ikke logget inn.";
        StateHasChanged(); // Sørg for at feilmeldingen vises
        return;
        }
        Http.DefaultRequestHeaders.Authorization =
        new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        try
        {
            if (!_artworkFiles.Any() || _artworkFiles.Count == 0)
            {
                ErrorMessage = "Minst ett bilde må lastes opp.";
                Console.WriteLine("⛔ Mangler bilder.");
                StateHasChanged();
                return;
            }

            var content = new MultipartFormDataContent();

            content.Add(new StringContent(_artworkRequest.Title), "Title");
            content.Add(new StringContent(_artworkRequest.Description ?? ""), "Description");
            content.Add(new StringContent(_artworkRequest.Artist), "Artist");
            content.Add(new StringContent(_artworkRequest.ForSale.ToString()), "ForSale");

            if (_artworkRequest.Price.HasValue)
                content.Add(new StringContent(_artworkRequest.Price.Value.ToString()), "Price");

            if (_artworkRequest.WidthDimension.HasValue)
                content.Add(new StringContent(_artworkRequest.WidthDimension.Value.ToString()), "Width");

            if (_artworkRequest.HeightDimension.HasValue)
                content.Add(new StringContent(_artworkRequest.HeightDimension.Value.ToString()), "Height");

            int index = 0;
            foreach (var (data, contentType, fileName) in _artworkFiles)
            {
                var streamContent = new StreamContent(new MemoryStream(data));
                streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(contentType);
                content.Add(streamContent, $"Images[{index}].ImageFile", fileName);
                content.Add(new StringContent("False"), $"Images[{index}].IsWallPreview");
                index++;
            }

            foreach (var (data, contentType, fileName) in _wallPreviewFiles)
            {
                var streamContent = new StreamContent(new MemoryStream(data));
                streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(contentType);
                content.Add(streamContent, $"Images[{index}].ImageFile", fileName);
                content.Add(new StringContent("True"), $"Images[{index}].IsWallPreview");
                index++;
            }



            var response = await Http.PostAsync("admin/api/Gallery/upload-artwork", content);
            Console.WriteLine("📡 Statuskode: " + response.StatusCode);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("✅ Opplasting fullført.");
                Navigation.NavigateTo("/");
            }
            else
            {
                ErrorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine("⛔ Server-feil: " + ErrorMessage);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "En feil oppsto under opplasting.";
            Console.WriteLine("⛔ Exception: " + ex.Message);
            StateHasChanged();
        }
            
    }
}
