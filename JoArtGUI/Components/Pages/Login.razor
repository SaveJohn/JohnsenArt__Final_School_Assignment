@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="container login-container">
    <h3 class="text-primary text-center">Temporary Login Page</h3>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
    <p class="alert alert-danger">@ErrorMessage</p>
    }

    <input class="form-control mb-2" @bind="Email" placeholder="Email"/>
    <input class="form-control mb-2" @bind="Password" placeholder="Password" type="password"/>
    <button class="btn btn-primary w-100" @onclick="PerformLogin">Login</button>

    <hr />

    <button class="btn btn-secondary w-100 mt-2" @onclick="TestStorage">Test LocalStorage</button>
    <p class="mt-2 text-muted">@TestResult</p>

    @if (LocalStorage == null)
    {
    <p class="text-danger">LocalStorage service is NOT available!</p>
    }
    else
    {
    <p class="text-success">LocalStorage services is AVAILABLE.</p>
    }
</div>




<p>@TestResult</p>

@code {
    private string Email = "";
    private string Password = "";
    private string ErrorMessage = "";
    private string TestResult = "waiting for test ..";

    private async Task TestStorage()
    {
        Console.WriteLine("TestStorage button clicked!"); // Debug log

        try
        {
            await LocalStorage.SetItemAsync("testKey", "Hello World");
            var value = await LocalStorage.GetItemAsync<string>("testKey");

            Console.WriteLine($"Stored value: {value}");

            TestResult = value ?? "Failed to store/retrieve!";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"LocalStorage Error: {ex.Message}");
            TestResult = "Error using LocalStorage!";
        }
    }


    private async Task PerformLogin()
    {
        var request = new { email = Email, password = Password };
        var response = await Http.PostAsJsonAsync("http://localhost:8080/admin/auth/login", request);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<AuthResponse>();
            if (result != null)
            {
                await LocalStorage.SetItemAsync("jwt", result.Token); // Store jwt in LS
                Navigation.NavigateTo("/admin");
            }
        }
        else
        {
            ErrorMessage = "Incorrect login details.";
        }
    }

    public class AuthResponse
    {
        public string Token { get; set; } = "";
    }

}