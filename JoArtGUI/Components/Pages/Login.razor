@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h3 class="tex2t-primary">Login page</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p style="color: red;">@ErrorMessage</p>
}

<input @bind="Email" placeholder="Email"/>
<input @bind="Password" placeholder="Password" type="password"/>
<button @onclick="PerformLogin">Login</button>


@if (LocalStorage == null)
{
    <p style="color: red;">LocalStorage service is NOT available!</p>
}
else
{
    <p style="color: green;">LocalStorage service is AVAILABLE.</p>
}


<button @onclick="TestStorage">Test LocalStorage</button>


<p>@TestResult</p>

@code {
    private string Email = "";
    private string Password = "";
    private string ErrorMessage = "";
    private string TestResult = "waiting for test ..";

    private async Task TestStorage()
    {
        Console.WriteLine("TestStorage button clicked!"); // Debug log

        try
        {
            await LocalStorage.SetItemAsync("testKey", "Hello World");
            var value = await LocalStorage.GetItemAsync<string>("testKey");

            Console.WriteLine($"Stored value: {value}");

            TestResult = value ?? "Failed to store/retrieve!";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"LocalStorage Error: {ex.Message}");
            TestResult = "Error using LocalStorage!";
        }
    }


    private async Task PerformLogin()
    {
        var request = new { email = Email, password = Password };
        var response = await Http.PostAsJsonAsync("http://localhost:8080/admin/auth/login", request);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<AuthResponse>();
            if (result != null)
            {
                await LocalStorage.SetItemAsync("jwt", result.Token); // Store jwt in LS
                Navigation.NavigateTo("/admin");
            }
        }
        else
        {
            ErrorMessage = "Incorrect login details.";
        }
    }

    public class AuthResponse
    {
        public string Token { get; set; } = "";
    }

}