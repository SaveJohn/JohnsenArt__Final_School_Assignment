@page "/login"
@using JoArtClassLib
@using JohnsenArtGUI.Authentication
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CustomAuthStateProvider AuthProvider

<h3>Login</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="text-danger">@ErrorMessage</div>
}

<EditForm Model="_request" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText id="username" class="form-control" @bind-Value="_request.Email" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="_request.Password" />
    </div>

    <button class="btn btn-primary" type="submit">Log in</button>
</EditForm>

@code {
    private LoginRequest _request = new();
    private string? ErrorMessage;

    private async Task HandleLogin()
    {
        ErrorMessage = null;

        try
        {
            var response = await Http.PostAsJsonAsync("admin/auth/login", _request);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginToken>();

                if (result?.Token is not null)
                {
                    await AuthProvider.MarkUserAsLoggedInAsync(result.Token);
                    Navigation.NavigateTo("/");
                }
                else
                {
                    ErrorMessage = "Invalid login response.";
                }
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<LoginErrorResponse>();
                ErrorMessage = error?.ErrorMessage ?? "Login failed.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }
    
}
