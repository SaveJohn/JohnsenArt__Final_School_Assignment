@page "/login"
@using JoArtClassLib
@using JohnsenArtGUI.Authentication
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CustomAuthStateProvider AuthProvider

<div class="login-container text-bg-light">
    <div class="login-card">
        <div class="login-avatar">
            <i class="fas fa-user-circle fa-4x"></i>
        </div>
        <h4 class="text-center">Login</h4>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="text-danger text-center">@ErrorMessage</div>
        }

        <EditForm Model="_request" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="input-group mb-3">
                <span class="input-group-text"><i class="fas fa-user"></i></span>
                <InputText class="form-control" @bind-Value="_request.Email" placeholder="Username" />
            </div>

            <div class="input-group mb-3">
                <span class="input-group-text"><i class="fas fa-lock"></i></span>
                <InputText type="@(_showPassword ? "text" : "password")" class="form-control" @bind-Value="_request.Password" placeholder="Password" />
                <span class="input-group-text password-toggle" @onclick="TogglePassword">
                    <i class="fas @( _showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                </span>
            </div>

            <button class="btn btn-primary w-100" type="submit">Log in</button>
        </EditForm>
    </div>
</div>

@code {
    private LoginRequest _request = new();
    private string? ErrorMessage;
    private bool _showPassword = false;

    private void TogglePassword()
    {
        _showPassword = !_showPassword;
    }

    private async Task HandleLogin()
    {
        ErrorMessage = null;

        try
        {
            var response = await Http.PostAsJsonAsync("admin/auth/login", _request);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginToken>();

                if (result?.Token is not null)
                {
                    await AuthProvider.MarkUserAsLoggedInAsync(result.Token);
                    Navigation.NavigateTo("/");
                }
                else
                {
                    ErrorMessage = "Invalid login response.";
                }
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<LoginErrorResponse>();
                ErrorMessage = error?.ErrorMessage ?? "Login failed.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }
}
