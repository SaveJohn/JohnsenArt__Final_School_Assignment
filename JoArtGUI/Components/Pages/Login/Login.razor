@page "/login"
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Login</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label>Email:</label>
        <InputText @bind-Value="loginModel.Email" class="form-control" />
    </div>
    <div class="mb-3">
        <label>Password:</label>
        <InputText @bind-Value="loginModel.Password" type="password" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private LoginModel loginModel = new();
    private string errorMessage = "";

    private async Task HandleLogin()
    {
        errorMessage = "";

        // Call the API on port 8080 to get the JWT.
        // Note: Use the full URL since your API is on a different port.
        var apiResponse = await Http.PostAsJsonAsync("http://localhost:8080/admin/auth/login", loginModel);
        if (!apiResponse.IsSuccessStatusCode)
        {
            errorMessage = "Login failed at API.";
            return;
        }

        // Deserialize the response to extract the token.
        var result = await apiResponse.Content.ReadFromJsonAsync<LoginResult>();
        if (result == null || string.IsNullOrEmpty(result.Token))
        {
            errorMessage = "Invalid token received.";
            return;
        }

        // Redirect to your local endpoint to complete the sign-in.
        // forceLoad: true forces a full page load so that headers can be modified.
        Navigation.NavigateTo($"/api/complete-signin?token={Uri.EscapeDataString(result.Token)}", forceLoad: true);
    }

    public class LoginModel
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }

    public class LoginResult
    {
        public string Token { get; set; } = "";
    }
}
