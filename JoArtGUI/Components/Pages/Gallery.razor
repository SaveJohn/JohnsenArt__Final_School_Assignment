@page "/Gallery"
@using JoArtClassLib.Art
@using JoArtClassLib.Enums
@inject HttpClient Http
<!-- Extra option bar for gallery -->
<div class="navbarFont">
    <nav class="navbar navbar-expand border-bottom py-2">
        <div class="container justify-content-center">
            <ul class="navbar-nav">
                <li class="nav-item px-2">
                    <label for="sortOption">Sorter etter:</label>
                    <select id="sortOption" @bind="SortOption">
                        <option value=@GallerySort.Newest>Nyeste</option>
                        <option value="@GallerySort.Oldest">Eldste</option>
                        @if (_filterOption == GalleryFilter.ForSale)
                        {
                            <option value="@GallerySort.LowPrice">Lavest pris</option>
                            <option value="@GallerySort.HighPrice">Høyest pris</option>
                        }
                    </select>
                </li>
                <li class="nav-item px-2">
                    <label for="filterOption">Filtrer etter:</label>
                    <select id="filterOption" @bind="FilterOption">
                        <option value=@GalleryFilter.All>Alle</option>
                        <option value=@GalleryFilter.ForSale>Til Salgs</option>
                        <option value=@GalleryFilter.NotForSale>Ikke til Salgs</option>
                    </select>
                </li>
                <AuthorizeView>
                    <li class="nav-item px-2">
                        <NavLink class="nav-link" href="/upload-artwork">Legg til kunstverk</NavLink>
                    </li>
                </AuthorizeView>
            </ul>
        </div>
    </nav>
</div>

<h3 class="text-center my-4">Kunstverk</h3>
<p class="text-center text-muted">@artworks?.Count</p>

@if (artworks == null)
{
    <p class="text-center">Kunstverk laster ...</p>
}
else
{
    <div class="container">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4">
            @foreach (var artwork in artworks)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        @if (artwork.Images?.Any() == true)
                        {
                            var img = artwork.Images.FirstOrDefault();
                            if (!string.IsNullOrEmpty(img?.ImageUrl))
                            {
                                <a href="/GalleryDetail/@artwork.Id">
                                    <img src="@img.ImageUrl"
                                         class="card-img-top"
                                         style="height: 250px; object-fit: cover;"
                                         alt="Kunstverk"/>
                                </a>
                            }
                            else
                            {
                                <div class="card-img-top bg-secondary text-white text-center p-5">
                                    <p>Ingen bilde funnet</p>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="card-img-top bg-secondary text-white text-center p-5">
                                <p>Ingen bilde funnet</p>
                            </div>
                        }


                        <div class="card-body">
                            <h5 class="card-title">@artwork.Title</h5>
                            <p class="card-text" style="font-size: 0.9rem; max-height: 80px; overflow: hidden; text-overflow: ellipsis;">
                                @artwork.Description
                            </p>
                        </div>
                        @if (artwork.ForSale == true)
                        {
                            <div class="card-footer text-center fw-bold">
                                <p><strong>Price:</strong> @(artwork.Price?.ToString("F2") ?? "0.00")-,</p>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    // List of artworks
    private List<ArtworkResponse>? artworks = [];
    
    // Sort ---
    // Bound value
    private GallerySort _sortOption = GallerySort.Newest;
    
    // Property with action if value changed
    private GallerySort SortOption
    {
        get => _sortOption;
        set
        {
            if (_sortOption == value) return;
            _sortOption = value;
            _ = SortOptionChanged();
        }
    }
    // Filter ---
    // Bound value
    private GalleryFilter _filterOption = GalleryFilter.All;
    
    // Property with action if value changed
    private GalleryFilter FilterOption
    {
        get => _filterOption;
        set
        {
            if (_filterOption == value) return;
            _filterOption = value;
            _ = FilterOptionChanged();
        }
    }
    
    
    

    protected override async Task OnInitializedAsync()
    {
        await LoadArtworksAsync();
    }

    private async Task LoadArtworksAsync()
    {
        // Defining paging parameters (Should be handled more dynamically later)
        int page = 1;
        int perPage = 35;
        
        // Building query string parameters
        var queryParams = new List<string>
        {
            $"page={page}",
            $"perPage={perPage}",
            $"sort={_sortOption}",
            $"filter={_filterOption}"
        };
        
        // Creating endpoint URL with the query string
        var url = $"api/PublicGallery/artworks?{string.Join("&", queryParams)}";
        
        try
        {
            artworks = await Http.GetFromJsonAsync<List<ArtworkResponse>>(url);
        }
        catch (Exception exep)
        {
            Console.WriteLine(exep);
            throw;
        }
        
    }

    private async Task SortOptionChanged()
    {
        await LoadArtworksAsync();
        StateHasChanged();
    }

    private async Task FilterOptionChanged()
    {
        await LoadArtworksAsync();
        StateHasChanged();
    }
    
    

}