@page "/Gallery"
@using JoArtClassLib.Art
@using JoArtClassLib.Enums
@using JohnsenArtGUI.Helpers.Interfaces
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager navigationManager

<!-- Toast Container -->
<div class="toast-container position-absolute bottom-0 end-0 p-3" style="z-index: 9999;">
    @if (!string.IsNullOrWhiteSpace(DeletedTitle))
    {
        <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
            <div id="liveToast" class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto text-danger">Kunstverk slettet</strong>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"
                            @onclick="CloseToast" />
                </div>
                <div class="toast-body">
                    "@DeletedTitle" er slettet
                </div>
            </div>
        </div>
    }
</div>

<!-- Extra option bar for gallery -->
<div class="navbarFont">
    
    <nav class="navbar navbar-expand-lg border-dark-bottom py-2">
        <div class="container">
            <div class="d-flex px-2">
                <div class="d-flex px-2">
                    <label class="fw-bolder px-2" for="sortOption">Sorter:</label>
                    <select id="sortOption" class="form-select form-select-sm" style="background: rgb(234, 234, 234)" @bind="SortOption">
                        <option value=@GallerySort.Newest>Nyeste</option>
                        <option value="@GallerySort.Oldest">Eldste</option>
                        @if (_filterOption == GalleryFilter.ForSale)
                        {
                            <option value="@GallerySort.LowPrice">Lavest pris</option>
                            <option value="@GallerySort.HighPrice">Høyest pris</option>
                        }
                    </select>
                </div>
                <div class="d-flex px-2">
                    <label class="fw-bolder px-2" for="filterOption">Filtrer:</label>
                    <select id="filterOption" class="form-select form-select-sm" style="background: rgb(234, 234, 234)" @bind="FilterOption">
                        <option value=@GalleryFilter.All>Alle</option>
                        <option value=@GalleryFilter.ForSale>Til Salgs</option>
                        <option value=@GalleryFilter.NotForSale>Ikke til Salgs</option>
                    </select>
                </div>
            </div>

            <div class="d-flex justify-content-end">
                <AuthorizeView>
                    <NavLink class="btn btn-sm btn-outline-success fw-bold rounded px-2 py-1" href="/upload-artwork">
                        + Legg til Kunstverk
                    </NavLink>
                </AuthorizeView>
            </div>
        </div>
    </nav>

</div>

<!--
<p class="text-center text-muted">@artworks?.Count</p>
-->
<br />
@if (artworks.Count < 1)
{
    <p class="text-center"><i class="spinner-border spinner-border-sm me-2"></i>Kunstverk laster ...</p>
}
else
{
    <div class="container">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4 ">
            @foreach (var artwork in artworks)
            {
                <div class="col">
                    @if (artwork.Images?.Any() == true)
                    {
                        var img = artwork.Images.FirstOrDefault();
                        var imageSrc = string.IsNullOrWhiteSpace(img?.ThumbnailUrl) ? img?.ImageUrl : img?.ThumbnailUrl;
                        <div class="artwork-entry text-center">
                            <a href="/GalleryDetail/@artwork.Id">
                                <img src="@imageSrc" class="img-fluid rounded"/>
                            </a>
                            <div class="artwork-meta">
                                <p class="art-title">@artwork.Title</p>
                                <p class="art-size">@artwork.WidthDimension x @artwork.HeightDimension cm</p>
                                @if (artwork.ForSale)
                                {
                                    <p class="art-price">Kan kjøpes:    @artwork.Price?.ToString("F2"),-</p>
                                }
                            </div>
                        </div>
                    }
                </div>
                
            }
            
        </div>
    </div>
    
    <br/><br/>
}
<div class="col">
    <div @ref="infiniteScrollTrigger" style="height: 1px;"></div>
</div>

@code {
    // List of artworks
    [Inject] ILocalStorageHelper LocalStorage { get; set; }
    private List<ArtworkResponse>? artworks = [];
    
    
    // Sort ---
    // Bound value
    private GallerySort _sortOption = GallerySort.Newest;
    
    // Property with action if value changed
    private GallerySort SortOption
    {
        get => _sortOption;
        set
        {
            if (_sortOption == value) return;
            _sortOption = value;
            _ = SortOptionChanged();
        }
        
    }
    // Filter ---
    // Bound value
    private GalleryFilter _filterOption = GalleryFilter.All;
    
    // Property with action if value changed
    private GalleryFilter FilterOption
    {
        get => _filterOption;
        set
        {
            if (_filterOption == value) return;
            _filterOption = value;
            _ = FilterOptionChanged();
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await EnsureLocalStorageInitialized();
        
        var rawSort = await LocalStorage.GetItem("sortOption");
        if (!string.IsNullOrWhiteSpace(rawSort))
            _sortOption = Enum.Parse<GallerySort>(rawSort, ignoreCase: true);

        var rawFilter = await LocalStorage.GetItem("filterOption");
        if (!string.IsNullOrWhiteSpace(rawFilter))
            _filterOption = Enum.Parse<GalleryFilter>(rawFilter, ignoreCase: true);
        
        await LoadArtworkAsync();
    }
    
    private async Task EnsureLocalStorageInitialized()
    {
        // Making a dummy call to make sure module is imported
        await LocalStorage.GetItem("dummy_key");
    }
    
    // Paging ---
    private int currentPage = 1;
    private int perPage = 12;
    private bool hasMore = true;
    private bool isLoadingMore = false;
    private ElementReference infiniteScrollTrigger;
    private DotNetObjectReference<Gallery> dotNetRef;
    private IJSObjectReference? _jsModule;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            
            dotNetRef = DotNetObjectReference.Create(this);
            _jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "/js/infiniteScroll.js");

            await Task.Delay(100); // Ensure DOM is rendered

            if (infiniteScrollTrigger.Context != null)
            {
                await _jsModule.InvokeVoidAsync("observeElement", dotNetRef, infiniteScrollTrigger);
            }
            else
            {
                Console.WriteLine("Trigger element is not yet available.");
            }
            
        }
    }

    [JSInvokable]
    public async Task LoadMoreArtworks()
    {
        if (isLoadingMore || !hasMore) return;

        isLoadingMore = true;
        currentPage++;
        await LoadArtworkAsync(append: true);
        isLoadingMore = false;
        
        StateHasChanged();
    }
    
    // Load Artworks ---
    private async Task LoadArtworkAsync(bool append = false)
    {
        if (!append)
        {
            currentPage = 1;
            hasMore = true;
            artworks.Clear();
        }
        
        // Getting sort and filter raw-string from Local Storage - casting to Enum and including fallbacks 
        var sortEnum = Enum.Parse<GallerySort>(await LocalStorage.GetItem("sortOption") ?? "Newest", true);
        var filterEnum = Enum.Parse<GalleryFilter>(await LocalStorage.GetItem("filterOption") ?? "All", true);
        
        // Building query string parameters
        var queryParams = new List<string>
        {
            $"page={currentPage}",
            $"perPage={perPage}",
            $"sort={sortEnum}",
            $"filter={filterEnum}"
        };
        
        // Creating endpoint URL with the query string
        var url = $"api/PublicGallery/artworks?{string.Join("&", queryParams)}";
        
        
        
        try
        {
            var newItems = await Http.GetFromJsonAsync<List<ArtworkResponse>>(url);

            if (newItems == null || newItems.Count == 0)
            {
                hasMore = false;
                return;
            }
            
            if (append)
            {
                artworks.AddRange(newItems);
            }
            else
            {
                artworks = newItems ?? new();
                currentPage = 1;
                hasMore = true;
            }

            await InvokeAsync(async () =>
            {
                await Task.Delay(50);
                if (_jsModule is null)
                    _jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "/js/infiniteScroll.js");

                dotNetRef ??= DotNetObjectReference.Create(this);
                await _jsModule.InvokeVoidAsync("observeElement", dotNetRef);
            });

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Feil ved henting av kunstverk: {ex.Message}");
            hasMore = false;
        }
        StateHasChanged();
    }

    private async Task SortOptionChanged()
    {
        await LocalStorage.SetItem("sortOption", _sortOption.ToString());
        await LoadArtworkAsync();
    }

    private async Task FilterOptionChanged()
    {
        await LocalStorage.SetItem("filterOption", _filterOption.ToString());
        await LoadArtworkAsync();
    }
    
    // Toast scenario for deleted artwork
    private string? DeletedTitle;

    protected override void OnParametersSet()
    {
        var uri = new Uri(navigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("deleted", out var titleFromQuery))
        {
            DeletedTitle = titleFromQuery;
        }
        else
        {
            DeletedTitle = null;
        }
    }

    private void CloseToast()
    {
        DeletedTitle = null;
    }
    
}