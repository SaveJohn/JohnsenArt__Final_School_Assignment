@page "/Gallery"
@using JoArtClassLib.Art
@using JoArtClassLib.Enums
@inject HttpClient Http
@inject NavigationManager navigationManager

<!-- Toast Container -->
<div class="toast-container position-absolute bottom-0 end-0 p-3" style="z-index: 9999;">
    @if (!string.IsNullOrWhiteSpace(DeletedTitle))
    {
        <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
            <div id="liveToast" class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto text-danger">Kunstverk slettet</strong>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"
                            @onclick="CloseToast" />
                </div>
                <div class="toast-body">
                    "@DeletedTitle" er slettet
                </div>
            </div>
        </div>
    }
</div>

<!-- Extra option bar for gallery -->
<div class="navbarFont">
    
    <nav class="navbar navbar-expand-lg border-dark-bottom py-2">
        <div class="container">
            <div class="d-flex px-2">
                <div class="d-flex px-2">
                    <label class="fw-bolder px-2" for="sortOption">Sorter:</label>
                    <select id="sortOption" class="form-select form-select-sm" style="background: rgb(234, 234, 234)" @bind="SortOption">
                        <option value=@GallerySort.Newest>Nyeste</option>
                        <option value="@GallerySort.Oldest">Eldste</option>
                        @if (_filterOption == GalleryFilter.ForSale)
                        {
                            <option value="@GallerySort.LowPrice">Lavest pris</option>
                            <option value="@GallerySort.HighPrice">Høyest pris</option>
                        }
                    </select>
                </div>
                <div class="d-flex px-2">
                    <label class="fw-bolder px-2" for="filterOption">Filtrer:</label>
                    <select id="filterOption" class="form-select form-select-sm" style="background: rgb(234, 234, 234)" @bind="FilterOption">
                        <option value=@GalleryFilter.All>Alle</option>
                        <option value=@GalleryFilter.ForSale>Til Salgs</option>
                        <option value=@GalleryFilter.NotForSale>Ikke til Salgs</option>
                    </select>
                </div>
            </div>

            <div class="d-flex justify-content-end">
                <AuthorizeView>
                    <NavLink class="btn btn-sm btn-outline-success fw-bold rounded px-2 py-1" href="/upload-artwork">
                        + Legg til Kunstverk
                    </NavLink>
                </AuthorizeView>
            </div>
        </div>
    </nav>

</div>

<!--
<p class="text-center text-muted">@artworks?.Count</p>
-->
<br />
@if (artworks.Count < 1)
{
    <p class="text-center">Kunstverk laster ...</p>
}
else
{
    <div class="container">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4 ">
            @foreach (var artwork in artworks)
            {
                <div class="col">
                    @if (artwork.Images?.Any() == true)
                    {
                        var img = artwork.Images.FirstOrDefault();
                        var imageSrc = string.IsNullOrWhiteSpace(img?.ThumbnailUrl) ? img?.ImageUrl : img?.ThumbnailUrl;
                        <div class="artwork-entry text-center">
                            <a href="/GalleryDetail/@artwork.Id">
                                <img src="@imageSrc" class="img-fluid rounded"/>
                            </a>
                            <div class="artwork-meta">
                                <p class="art-title">@artwork.Title</p>
                                <p class="art-size">@artwork.WidthDimension x @artwork.HeightDimension cm</p>
                                @if (artwork.ForSale)
                                {
                                    <p class="art-price">Kan kjøpes:    @artwork.Price?.ToString("F2"),-</p>
                                }
                            </div>
                        </div>
                    }
                </div>


            }
        </div>
    </div>
    <br/><br/>
}

@code {
    // List of artworks
    private List<ArtworkResponse>? artworks = [];
    
    // Sort ---
    // Bound value
    private GallerySort _sortOption = GallerySort.Newest;
    
    // Property with action if value changed
    private GallerySort SortOption
    {
        get => _sortOption;
        set
        {
            if (_sortOption == value) return;
            _sortOption = value;
            _ = SortOptionChanged();
        }
    }
    // Filter ---
    // Bound value
    private GalleryFilter _filterOption = GalleryFilter.All;
    
    // Property with action if value changed
    private GalleryFilter FilterOption
    {
        get => _filterOption;
        set
        {
            if (_filterOption == value) return;
            _filterOption = value;
            _ = FilterOptionChanged();
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadArtworksAsync();
    }

    private async Task LoadArtworksAsync()
    {
        // Defining paging parameters (Should be handled more dynamically later)
        int page = 1;
        int perPage = 35;
        
        // Building query string parameters
        var queryParams = new List<string>
        {
            $"page={page}",
            $"perPage={perPage}",
            $"sort={_sortOption}",
            $"filter={_filterOption}"
        };
        
        // Creating endpoint URL with the query string
        var url = $"api/PublicGallery/artworks?{string.Join("&", queryParams)}";
        
        try
        {
            artworks = await Http.GetFromJsonAsync<List<ArtworkResponse>>(url);
        }
        catch (Exception exep)
        {
            Console.WriteLine(exep);
            throw;
        }
        
    }

    private async Task SortOptionChanged()
    {
        await LoadArtworksAsync();
        StateHasChanged();
    }

    private async Task FilterOptionChanged()
    {
        await LoadArtworksAsync();
        StateHasChanged();
    }
    
    // Toast scenario for deleted artwork
    private string? DeletedTitle;

    protected override void OnParametersSet()
    {
        var uri = new Uri(navigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("deleted", out var titleFromQuery))
        {
            DeletedTitle = titleFromQuery;
        }
        else
        {
            DeletedTitle = null;
        }
    }

    private void CloseToast()
    {
        DeletedTitle = null;
    }
    
}