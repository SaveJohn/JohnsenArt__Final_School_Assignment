@page "/upload-artwork"
@attribute [Authorize]
@using JoArtClassLib.Art
@using JoArtClassLib.Error
@inject HttpClient Http
@using Microsoft.AspNetCore.Authorization
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject Logger<UploadArtwork> _logger

<PageTitle>Lastopp nytt kunstverk</PageTitle>

@if (_uploadSuccess)
{
    <div class="alert alert-success text-center">
        <h4>✅ Kunstverket ble lastet opp!</h4>
        <p>Hva ønsker du å gjøre videre?</p>
        <button class="btn btn-outline-primary me-2"
                @onclick="ViewArtwork">
            Se kunstverket
        </button>
        <button class="btn btn-outline-secondary"
                @onclick="UploadAnother">
            Last opp et nytt
        </button>
    </div>
}
else
{
    <div class="upload-artwork-container text-bg-light mt-4">
        <div class="upload-card">
            <EditForm Model="_artworkRequest" OnValidSubmit="SubmitArtworkAsync">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="row ">
                    <div class="mb-4">
                        <h4 class="text-center pb-3">Last Opp Kunstverk</h4>
                    </div>
                    <!-- Left side -->
                    <div class="col-md-6 pe-4">
                        <!-- Title. -->
                        <div class="mb-3">
                            <label for="title">Tittel:</label><br/>
                            <InputText class="form-control"
                                       @bind-Value="_artworkRequest.Title"
                                       placeholder="Tittel"/>
                        </div>
                        <div class="mb-3">
                            <label for="Materials">Materialer:</label><br/>
                            <InputText class="form-control"
                                       @bind-Value="_artworkRequest.Materials"
                                       placeholder="Materialer"/>
                        </div>
                        <div class="row mb-3">
                            <div class="col">
                                <!-- Width -->
                                <div class="mb-3">
                                    <label for="width">Bredde (cm):</label>
                                    <InputNumber class="form-control"
                                                 @bind-Value="_artworkRequest.WidthDimension"
                                                 placeholder="Bredde"/>
                                </div>
                                <!-- For sale? -->
                                <div class="mb-3 form-check">
                                    <InputCheckbox @bind-Value="_artworkRequest.ForSale" class="form-check-input"
                                                   id="forSaleCheckbox"/>
                                    <label class="form-check-label"
                                           for="forSaleCheckbox">Til salgs</label>
                                </div>
                                <!-- Price -->
                                <div class="mb-3">
                                    <label for="price">Pris (kr):</label>
                                    <InputNumber class="form-control"
                                                 @bind-Value="_artworkRequest.Price"
                                                 disabled="@(!_artworkRequest.ForSale)"
                                                 id="price"
                                                 placeholder="Pris"/>
                                </div>
                                @if (!string.IsNullOrWhiteSpace(ErrorMessage))
                                {
                                    <div class="alert alert-danger mt-3">@ErrorMessage</div>
                                }
                                
                            </div>
                            <div class="col">
                                <!-- Height -->
                                <div class="mb-3">
                                    <label for="height">Høyde (cm):</label>
                                    <InputNumber class="form-control"
                                                 @bind-Value="_artworkRequest.HeightDimension"
                                                 placeholder="Høyde"/>
                                </div>
                                <!-- Home Page Rotation -->
                                <div class="mb-3 form-check">
                                    <InputCheckbox @bind-Value="_artworkRequest.HomePageRotation"
                                                   class="form-check-input" id="rotationCheckbox"/>
                                    <label class="form-check-label"
                                           for="rotationCheckbox">Legg til som forsidebilde</label>
                                </div>

                            </div>
                            
                        </div>
                    </div>
                    <!-- Right side -->
                    <div class="col-md-6 border-start ps-4">
                        <div class="d-flex flex-column gap-3">
                            <!-- Add Artwork Image -->
                            <div class="mb-3">
                                <label for="artwork-image" class="form-label">Last opp kunstverk bilde-fil:</label>
                                <InputFile id="artworkFileInput"
                                           @ref="_artworkInputRef"
                                           OnChange="LoadArtworkImage"
                                           class="d-none"/>
                            </div>

                            <div class="d-flex flex-wrap gap-3 mb-4">

                                @for (int i = 0; i < _artworkImages.Count; i++)
                                {
                                    var localIndex = i;
                                    <div class="position-relative shadow-sm border rounded" style="width: 100px; height: 100px;">
                                        <img src="@_artworkImages[localIndex]"
                                             class="img-thumbnail w-100 h-100"
                                             style="object-fit: cover;"/>
                                        <button type="button"
                                                class="btn-close position-absolute top-0 end-0"
                                                @onclick="@(() => RemoveArtworkImage(localIndex))"
                                                title="Fjern bilde">
                                        </button>
                                    </div>
                                }
                                <!-- Add Image Button -->
                                <div class="image-upload-slot"
                                     @onclick="TriggerArtworkFileDialog">
                                    <span class="plus-icon">+</span>
                                </div>
                            </div>

                        </div>
                    </div>

                    <!-- Description -->
                    <div class="mb-3">
                        <label for="description">Tekst beskrivelse til kunstverk:</label>
                        <InputTextArea
                            class="form-control"
                            style="height: 150px;
                                    resize: vertical;"
                            @bind-Value="_artworkRequest.Description"
                            placeholder="Bildetekst"/>
                    </div>
                    <div class="mt-4">
                        <button class="btn btn-primary w-100" type="submit">Last Opp</button>
                    </div>
                    <div class="mt-4">
                        <NavLink class="btn btn-outline-warning w-100" href="/Gallery">Avbryt</NavLink>
                    </div>
                </div>
            </EditForm>
        </div>
        <!-- Loading feedback for submit -->
        <div class="modal fade show" tabindex="-1"
             style="display:@(_isUploading ? "block" : "none"); background-color: rgba(0,0,0,0.5);" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content border-0 bg-transparent text-center">
                    <div class="modal-body">
                        <div class="spinner-border text-light mb-3" role="status"
                             style="width: 3rem; height: 3rem;"></div>
                        <p class="text-white fs-5">Laster opp kunstverket ...</p>
                    </div>
                </div>
            </div>
        </div>
        @if (_isUploading)
        {
            <style>
                body {
                    overflow: hidden;
                }
            </style>
        }
    </div>
}


@if (errors.Count > 0)
{
    <h2>Feilmeldinger</h2>
    <ul class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}
@code {

    // Request DTO's
    private ArtworkRequest _artworkRequest = new();
    private ImageRequest? _imageRequest;
    
    // Base64 strings for preview-thumbnail images
    private List<string> _artworkImages = new();
    
    // Blazor InputFile references 
    private InputFile? _artworkInputRef;
    
    //Data collection for images: binary data along with MIME type and original filename.
    private List<(byte[] data, string contentType, string fileName)> _artworkFiles = new();
    
    // Conditional variables
    private long maxFileSize = 1024 * 1024 * 10; // Max 10MB
    private bool _uploadSuccess = false;
    private int? _newArtworkId = null;
    
    // Loading
    private bool _isUploading = false;
    
    // Error collections
    private List<ErrorResponse> errors = new();
    private string? ErrorMessage;
    
    // Load Artwork Image 
    private async Task LoadArtworkImage(InputFileChangeEventArgs e)
    {
        errors.Clear();
        foreach (IBrowserFile file in e.GetMultipleFiles())
        {
            using var stream = file.OpenReadStream(maxFileSize);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var bytes = ms.ToArray();
            var base64 = Convert.ToBase64String(bytes);
            var imageDataUrl = $"data:{file.ContentType};base64,{base64}";
            _artworkImages.Add(imageDataUrl);
            _artworkFiles.Add((bytes, file.ContentType, file.Name));
        }
    }
    
    
    // Trigger file dialog programmatically via JS using Blazor InputFile referenses
    private async Task TriggerArtworkFileDialog() // Artwork
    {
        await JS.InvokeVoidAsync("triggerClick", "artworkFileInput");
    }
    
    
    // Remove Artwork from input
    private void RemoveArtworkImage(int index)
    {
        if (_artworkFiles.Count > index && _artworkImages.Count > index)
        {
            _artworkImages.RemoveAt(index);
            _artworkFiles.RemoveAt(index);
        }
    }
    
    
    // Submit Complete Artwork
    private async Task SubmitArtworkAsync()
    {
        _isUploading = true;
        ErrorMessage = null;
        StateHasChanged();
        
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var token = authState.User.FindFirst("JWT")?.Value;

        if (string.IsNullOrWhiteSpace(token))
        {
            ErrorMessage = "Bruker er ikke logget inn.";
            StateHasChanged();
            return;
        }

        // Attach the token as a Bearer header for API calls.
        Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        
        // Trying to upload artwork to database and imnages to s3 via API
        try
        {
            // Making sure that artwork image is added
            if (!_artworkFiles.Any() || _artworkFiles.Count == 0)
            {
                ErrorMessage = "Minst ett bilde må lastes opp.";

                _logger.LogWarning("No image files provided.");
                StateHasChanged();
                return;
            }
            
            // Creating our Request model to send to API endpoint
            var content = new MultipartFormDataContent();

            content.Add(new StringContent(_artworkRequest.Title), "Title");
            content.Add(new StringContent(_artworkRequest.Description ?? ""), "Description");
            content.Add(new StringContent(_artworkRequest.Materials ?? ""), "Materials");
            content.Add(new StringContent(_artworkRequest.Artist), "Artist");
            content.Add(new StringContent(_artworkRequest.ForSale.ToString()), "ForSale");
            content.Add(new StringContent(_artworkRequest.HomePageRotation.ToString()), "HomePageRotation");

            if (_artworkRequest.Price.HasValue)
                content.Add(new StringContent(_artworkRequest.Price.Value.ToString()), "Price");

            if (_artworkRequest.WidthDimension.HasValue)
                content.Add(new StringContent(_artworkRequest.WidthDimension.Value.ToString()), "WidthDimension");

            if (_artworkRequest.HeightDimension.HasValue)
                content.Add(new StringContent(_artworkRequest.HeightDimension.Value.ToString()), "HeightDimension");
            
            // Adding virtual properties to request model (Images)
            int index = 0;
            // Artwork images
            foreach (var (data, contentType, fileName) in _artworkFiles)
            {
                var streamContent = new StreamContent(new MemoryStream(data));
                streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(contentType);
                content.Add(streamContent, $"Images[{index}].ImageFile", fileName);
                content.Add(streamContent, $"Images[{index}].ImageFile", fileName);
                content.Add(new StringContent("0"), $"Images[{index}].Id");
                index++;
            }
           
            // Sending the request to API upload artwork endpoint
            var response = await Http.PostAsync("admin/api/Gallery/upload-artwork", content);

            _logger.LogInformation("Api response status code: {StatusCode}", response.StatusCode);

            // Result
            if (response.IsSuccessStatusCode)
            {
                _logger.LogInformation("Upload completed successfully.");
                var result = await response.Content.ReadFromJsonAsync<ArtworkResponse>();
                _newArtworkId = result?.Id;
                _uploadSuccess = true;
            }
            else
            {
                if (!response.IsSuccessStatusCode)
                {
                    var rawError = await response.Content.ReadAsStringAsync();


                    _logger.LogError("Upload error occurred.");

                    _logger.LogError("API returned status code {StatusCode} with content: {Content}", response.StatusCode, rawError);

                    _logger.LogError(rawError, "Exception during artwork upload.");
                    ErrorMessage = $"Server returned: {(int)response.StatusCode} - {response.ReasonPhrase}";
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "En feil oppsto under opplasting.";
           
            _logger.LogError(ex, "Exception during artwork upload.");
            StateHasChanged();
        }
        finally
        {
            _isUploading = false;
            StateHasChanged(); 
        }
    }
    
    // When artwork is uploaded ------
    
    // View uploaded artwork
    private void ViewArtwork()
    {
        Navigation.NavigateTo($"/GalleryDetail/{_newArtworkId}");
    }
    
    // Upload another artwork
    private void UploadAnother()
    {
        _uploadSuccess = false;
        _newArtworkId = null;
        _artworkRequest = new();
        _artworkImages.Clear();
        _artworkFiles.Clear();
        ErrorMessage = null;
        StateHasChanged();
    }

}